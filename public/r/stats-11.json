{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stats-11",
  "type": "registry:block",
  "title": "Status dashboard with progress bars",
  "description": "A status dashboard with progress bars block.",
  "author": "Gocha Gochitashvili <https://lost-ui.vercel.app>",
  "registryDependencies": ["button", "card", "dialog", "input", "label"],
  "dependencies": ["lucide-react"],
  "files": [
    {
      "path": "content/components/stats/stats-11.tsx",
      "type": "registry:component",
      "target": "components/stats-11.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Box, Edit } from \"lucide-react\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string;\n  limit: string;\n  percentage: number;\n  status?: string;\n  statusColor?: string;\n  progressColor: string;\n  details?: Array<{ label: string; value: string; color: string }>;\n  actionLabel: string;\n  actionIcon: React.ReactNode;\n  warningMessage?: string;\n  onActionClick?: () => void;\n}\n\nfunction MetricCard({\n  title,\n  value,\n  limit,\n  percentage,\n  status,\n  statusColor = \"text-emerald-600 dark:text-emerald-400\",\n  progressColor,\n  details,\n  actionLabel,\n  actionIcon,\n  warningMessage,\n  onActionClick,\n}: MetricCardProps) {\n  const renderProgressBar = () => {\n    if (details && title === \"Commands\") {\n      const writes = Number.parseInt(details[0].value.replace(/,/g, \"\"));\n      const reads = Number.parseInt(details[1].value.replace(/,/g, \"\"));\n      const total = writes + reads;\n      const writesPercentage = (writes / total) * 100;\n      const readsPercentage = (reads / total) * 100;\n\n      return (\n        <div className=\"relative h-1 w-full overflow-hidden rounded-full bg-muted\">\n          <div\n            className=\"absolute left-0 h-full bg-emerald-500 transition-all duration-300\"\n            style={{ width: `${writesPercentage}%` }}\n          />\n          <div\n            className=\"absolute h-full bg-blue-500 transition-all duration-300\"\n            style={{\n              left: `${writesPercentage}%`,\n              width: `${readsPercentage}%`,\n            }}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"relative h-1 w-full overflow-hidden rounded-full bg-muted\">\n        <div\n          className={`h-full transition-all duration-300 ${progressColor}`}\n          style={{ width: `${Math.min(percentage, 100)}%` }}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"relative overflow-hidden max-w-[280px]\">\n      <CardContent className=\"p-4 py-0\">\n        <h5 className=\"text-xs font-normal leading-none tracking-wide text-muted-foreground dark:text-foreground/80 uppercase\">\n          {title}\n        </h5>\n\n        <div className=\"mt-2 flex items-baseline gap-1\">\n          <div className=\"text-[1.2rem] font-medium leading-none text-foreground tabular-nums\">\n            {value}\n          </div>\n          <div className=\"text-xs leading-none text-muted-foreground\">\n            / {limit}\n          </div>\n        </div>\n\n        <div className=\"mt-3\">\n          {renderProgressBar()}\n\n          {details && (\n            <div className=\"my-6 mb-8\">\n              <div className=\"flex flex-col gap-3\">\n                {details.map((detail, index) => (\n                  <div\n                    key={index}\n                    className=\"flex w-full items-center text-xs leading-none text-muted-foreground dark:text-foreground/70\"\n                  >\n                    <div\n                      className={`mr-[6px] h-2 w-2 rounded-full ${detail.color}`}\n                    />\n                    <div className=\"mr-1\">{detail.label}</div>\n                    <div className=\"h-[9px] flex-1 border-b-2 border-dotted border-border\" />\n                    <div className=\"ml-1 tabular-nums\">{detail.value}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {status && (\n            <div className=\"pt-2\">\n              <div className={statusColor}>{status}</div>\n            </div>\n          )}\n\n          {warningMessage && (\n            <div className=\"pt-2\">\n              <div className=\"text-sm text-amber-700 dark:text-amber-400\">\n                {warningMessage}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"absolute bottom-0 left-0 right-0\">\n          <Button\n            variant=\"ghost\"\n            className=\"h-8 w-full rounded-none text-blue-500 gap-0 justify-start hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 bg-muted/50\"\n            onClick={onActionClick}\n          >\n            {actionIcon}\n            <span className=\"ml-1 text-xs\">{actionLabel}</span>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction BudgetDialog({\n  open,\n  onOpenChange,\n}: {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}) {\n  const [budget, setBudget] = useState(\"150\");\n\n  const handleUpdate = () => {\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Update budget</DialogTitle>\n          <DialogDescription>\n            When your monthly cost reaches the max budget, we send an email and\n            throttle your database. You will not be charged beyond your set\n            budget for this database.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"budget\">Max budget per month</Label>\n          <Input\n            id=\"budget\"\n            value={budget}\n            onChange={(e) => setBudget(e.target.value)}\n            type=\"number\"\n            placeholder=\"150\"\n          />\n        </div>\n\n        <DialogFooter className=\"pt-2\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleUpdate}>Update</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Stats11() {\n  const [budgetDialogOpen, setBudgetDialogOpen] = useState(false);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Commands\"\n          value=\"13.8M\"\n          limit=\"Unlimited\"\n          percentage={67}\n          progressColor=\"bg-blue-500\"\n          details={[\n            { label: \"Writes\", value: \"11,276,493\", color: \"bg-emerald-500\" },\n            { label: \"Reads\", value: \"2,548,921\", color: \"bg-blue-500\" },\n          ]}\n          actionLabel=\"Upgrade\"\n          actionIcon={<Box className=\"h-4 w-4\" />}\n        />\n\n        <MetricCard\n          title=\"Bandwidth\"\n          value=\"141 GB\"\n          limit=\"150 GB\"\n          percentage={94}\n          progressColor=\"bg-orange-500\"\n          warningMessage=\"There will be a charge for the excessive bandwidth over the limit.\"\n          actionLabel=\"Upgrade\"\n          actionIcon={<Box className=\"h-4 w-4\" />}\n        />\n\n        <MetricCard\n          title=\"Storage\"\n          value=\"37 GB\"\n          limit=\"500 GB\"\n          percentage={7.4}\n          progressColor=\"bg-emerald-500\"\n          status=\"It's all right.\"\n          actionLabel=\"Upgrade\"\n          actionIcon={<Box className=\"h-4 w-4\" />}\n        />\n\n        <MetricCard\n          title=\"Cost\"\n          value=\"$73.42\"\n          limit=\"$150 Budget\"\n          percentage={48.95}\n          progressColor=\"bg-emerald-500\"\n          status=\"It's all right.\"\n          actionLabel=\"Change Budget\"\n          actionIcon={<Edit className=\"h-4 w-4\" />}\n          onActionClick={() => setBudgetDialogOpen(true)}\n        />\n      </div>\n\n      <BudgetDialog\n        open={budgetDialogOpen}\n        onOpenChange={setBudgetDialogOpen}\n      />\n    </>\n  );\n}\n"
    }
  ],
  "categories": ["stats"]
}
