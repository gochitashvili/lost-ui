{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "blocks",
  "homepage": "https://lost-ui.vercel.app",
  "items": [
    {
      "name": "navbar-01",
      "type": "registry:block",
      "title": "Navbar",
      "description": "A navbar block.",
      "author": "Gocha Gochitashvili <https://lost-ui.vercel.app>",
      "registryDependencies": ["button", "drawer", "navigation-menu"],
      "dependencies": ["@tabler/icons-react", "lucide-react"],
      "files": [
        {
          "path": "content/components/navbars/navbar-01.tsx",
          "type": "registry:component",
          "target": "components/navbar-01.tsx",
          "content": "\"use client\";\nimport * as React from \"react\";\nimport Link from \"next/link\";\nimport {\n  CircleCheckIcon,\n  CircleHelpIcon,\n  CircleIcon,\n  ChartNoAxesGantt,\n} from \"lucide-react\";\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  navigationMenuTriggerStyle,\n} from \"@/components/ui/navigation-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { IconMenu } from \"@tabler/icons-react\";\n\nconst components: { title: string; href: string; description: string }[] = [\n  {\n    title: \"Alert Dialog\",\n    href: \"/docs/primitives/alert-dialog\",\n    description:\n      \"A modal dialog that interrupts the user with important content and expects a response.\",\n  },\n  {\n    title: \"Hover Card\",\n    href: \"/docs/primitives/hover-card\",\n    description:\n      \"For sighted users to preview content available behind a link.\",\n  },\n  {\n    title: \"Progress\",\n    href: \"/docs/primitives/progress\",\n    description:\n      \"Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.\",\n  },\n  {\n    title: \"Scroll-area\",\n    href: \"/docs/primitives/scroll-area\",\n    description: \"Visually or semantically separates content.\",\n  },\n  {\n    title: \"Tabs\",\n    href: \"/docs/primitives/tabs\",\n    description:\n      \"A set of layered sections of content—known as tab panels—that are displayed one at a time.\",\n  },\n  {\n    title: \"Tooltip\",\n    href: \"/docs/primitives/tooltip\",\n    description:\n      \"A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\",\n  },\n];\n\nexport default function Navbar01() {\n  return (\n    <nav className=\"w-full h-16 px-4 sm:px-8 md:px-10 lg:px-12 py-2.5 bg-secondary/30 border-b border-border/30 flex items-center justify-between\">\n      <div className=\"flex items-center gap-8\">\n        <a href=\"/\" className=\"flex items-center gap-2\">\n          <span className=\"bg-primary text-primary-foreground flex items-center justify-center rounded-md p-1.5\">\n            <ChartNoAxesGantt className=\"size-5\" />\n          </span>\n          <span className=\"text-lg bloc font-medium text-primary\">Lost</span>\n        </a>\n        <NavigationMenu className=\"hidden lg:block\" viewport={false}>\n          <NavigationMenuList>\n            <NavigationMenuItem>\n              <NavigationMenuTrigger className=\"bg-transparent\">\n                Home\n              </NavigationMenuTrigger>\n              <NavigationMenuContent>\n                <ul className=\"grid gap-2 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]\">\n                  <li className=\"row-span-3\">\n                    <NavigationMenuLink asChild>\n                      <a\n                        className=\"from-muted/50 to-muted flex h-full w-full flex-col justify-end rounded-md bg-linear-to-b p-6 no-underline outline-hidden select-none focus:shadow-md\"\n                        href=\"/\"\n                      >\n                        <div className=\"mt-4 mb-2 text-lg font-medium\">\n                          shadcn/ui\n                        </div>\n                        <p className=\"text-muted-foreground text-sm leading-tight\">\n                          Beautifully designed components built with Tailwind\n                          CSS.\n                        </p>\n                      </a>\n                    </NavigationMenuLink>\n                  </li>\n                  <ListItem href=\"/docs\" title=\"Introduction\">\n                    Re-usable components built using Radix UI and Tailwind CSS.\n                  </ListItem>\n                  <ListItem href=\"/docs/installation\" title=\"Installation\">\n                    How to install dependencies and structure your app.\n                  </ListItem>\n                  <ListItem\n                    href=\"/docs/primitives/typography\"\n                    title=\"Typography\"\n                  >\n                    Styles for headings, paragraphs, lists...etc\n                  </ListItem>\n                </ul>\n              </NavigationMenuContent>\n            </NavigationMenuItem>\n            <NavigationMenuItem>\n              <NavigationMenuTrigger className=\"bg-transparent\">\n                Components\n              </NavigationMenuTrigger>\n              <NavigationMenuContent>\n                <ul className=\"grid w-[400px] gap-2 md:w-[500px] md:grid-cols-2 lg:w-[600px]\">\n                  {components.map((component) => (\n                    <ListItem\n                      key={component.title}\n                      title={component.title}\n                      href={component.href}\n                    >\n                      {component.description}\n                    </ListItem>\n                  ))}\n                </ul>\n              </NavigationMenuContent>\n            </NavigationMenuItem>\n            <NavigationMenuItem>\n              <NavigationMenuLink\n                asChild\n                className={navigationMenuTriggerStyle() + \" bg-transparent\"}\n              >\n                <Link href=\"/docs\">Docs</Link>\n              </NavigationMenuLink>\n            </NavigationMenuItem>\n            <NavigationMenuItem>\n              <NavigationMenuTrigger className=\"bg-transparent\">\n                List\n              </NavigationMenuTrigger>\n              <NavigationMenuContent>\n                <ul className=\"grid w-[300px] gap-4\">\n                  <li>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\">\n                        <div className=\"font-medium\">Components</div>\n                        <div className=\"text-muted-foreground\">\n                          Browse all components in the library.\n                        </div>\n                      </Link>\n                    </NavigationMenuLink>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\">\n                        <div className=\"font-medium\">Documentation</div>\n                        <div className=\"text-muted-foreground\">\n                          Learn how to use the library.\n                        </div>\n                      </Link>\n                    </NavigationMenuLink>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\">\n                        <div className=\"font-medium\">Blog</div>\n                        <div className=\"text-muted-foreground\">\n                          Read our latest blog posts.\n                        </div>\n                      </Link>\n                    </NavigationMenuLink>\n                  </li>\n                </ul>\n              </NavigationMenuContent>\n            </NavigationMenuItem>\n            <NavigationMenuItem>\n              <NavigationMenuTrigger className=\"bg-transparent\">\n                Simple\n              </NavigationMenuTrigger>\n              <NavigationMenuContent>\n                <ul className=\"grid w-[200px] gap-4\">\n                  <li>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\">Components</Link>\n                    </NavigationMenuLink>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\">Documentation</Link>\n                    </NavigationMenuLink>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\">Blocks</Link>\n                    </NavigationMenuLink>\n                  </li>\n                </ul>\n              </NavigationMenuContent>\n            </NavigationMenuItem>\n            <NavigationMenuItem>\n              <NavigationMenuTrigger className=\"bg-transparent\">\n                With Icon\n              </NavigationMenuTrigger>\n              <NavigationMenuContent>\n                <ul className=\"grid w-[200px] gap-4\">\n                  <li>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\" className=\"flex-row items-center gap-2\">\n                        <CircleHelpIcon />\n                        Backlog\n                      </Link>\n                    </NavigationMenuLink>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\" className=\"flex-row items-center gap-2\">\n                        <CircleIcon />\n                        To Do\n                      </Link>\n                    </NavigationMenuLink>\n                    <NavigationMenuLink asChild>\n                      <Link href=\"#\" className=\"flex-row items-center gap-2\">\n                        <CircleCheckIcon />\n                        Done\n                      </Link>\n                    </NavigationMenuLink>\n                  </li>\n                </ul>\n              </NavigationMenuContent>\n            </NavigationMenuItem>\n          </NavigationMenuList>\n        </NavigationMenu>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <div className=\"items-center gap-2 hidden md:flex\">\n          <Button variant=\"default\">Sign in</Button>\n          <Button variant=\"outline\">Sign up</Button>\n        </div>\n        <div className=\"lg:hidden\">\n          <Drawer direction=\"right\">\n            <DrawerTrigger asChild>\n              <Button variant=\"outline\" size=\"icon\">\n                <IconMenu />\n              </Button>\n            </DrawerTrigger>\n            <DrawerContent>\n              <DrawerHeader>\n                <DrawerTitle>Lost</DrawerTitle>\n                <DrawerDescription>\n                  Beautifully designed components built with Tailwind CSS.\n                </DrawerDescription>\n              </DrawerHeader>\n              <DrawerFooter>\n                <Button>Submit</Button>\n                <DrawerClose>\n                  <Button variant=\"outline\">Cancel</Button>\n                </DrawerClose>\n              </DrawerFooter>\n            </DrawerContent>\n          </Drawer>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nfunction ListItem({\n  title,\n  children,\n  href,\n  ...props\n}: React.ComponentPropsWithoutRef<\"li\"> & { href: string }) {\n  return (\n    <li {...props}>\n      <NavigationMenuLink asChild>\n        <Link href={href}>\n          <div className=\"text-sm leading-none font-medium\">{title}</div>\n          <p className=\"text-muted-foreground line-clamp-2 text-sm leading-snug\">\n            {children}\n          </p>\n        </Link>\n      </NavigationMenuLink>\n    </li>\n  );\n}\n"
        }
      ],
      "categories": ["navbars"]
    },
    {
      "name": "sidebar-01",
      "type": "registry:block",
      "title": "Sidebar",
      "description": "A sidebar block.",
      "author": "Gocha Gochitashvili <https://lost-ui.vercel.app>",
      "registryDependencies": [
        "avatar",
        "button",
        "collapsible",
        "command",
        "dropdown-menu",
        "sidebar",
        "tooltip"
      ],
      "dependencies": ["@tabler/icons-react", "lucide-react"],
      "files": [
        {
          "path": "content/components/sidebar/sidebar-01/app-sidebar.tsx",
          "type": "registry:component",
          "target": "components/app-sidebar.tsx",
          "content": "\"use client\";\n\nimport { Sidebar, SidebarContent } from \"@/components/ui/sidebar\";\nimport {\n  IconAd2,\n  IconBellRinging,\n  IconCalendar,\n  IconCalendarStats,\n  IconListDetails,\n  IconNews,\n  IconNotebook,\n  IconProgressCheck,\n  IconSettingsCode,\n} from \"@tabler/icons-react\";\nimport { LayoutDashboard, Package } from \"lucide-react\";\nimport { NavCollapsible } from \"@/components/nav-collapsible\";\nimport { NavFooter } from \"@/components/nav-footer\";\nimport { NavHeader } from \"@/components/nav-header\";\nimport { NavMain } from \"@/components/nav-main\";\nimport type { SidebarData } from \"./types\";\n\nconst data: SidebarData = {\n  user: {\n    name: \"ephraim\",\n    email: \"ephraim@lost-ui.vercel.app\",\n    avatar: \"/avatar-01.png\",\n  },\n  navMain: [\n    {\n      id: \"overview\",\n      title: \"Overview\",\n      url: \"#\",\n      icon: LayoutDashboard,\n      isActive: true,\n    },\n    {\n      id: \"tasks\",\n      title: \"Tasks\",\n      url: \"#\",\n      icon: IconListDetails,\n    },\n    {\n      id: \"meetings\",\n      title: \"Meetings\",\n      url: \"#\",\n      icon: IconCalendarStats,\n    },\n    {\n      id: \"notes\",\n      title: \"Notes\",\n      url: \"#\",\n      icon: IconNotebook,\n    },\n    {\n      id: \"calendar\",\n      title: \"Calendar\",\n      url: \"#\",\n      icon: IconCalendar,\n    },\n    {\n      id: \"completed\",\n      title: \"Completed\",\n      url: \"#\",\n      icon: IconProgressCheck,\n    },\n    {\n      id: \"notifications\",\n      title: \"Notifications\",\n      url: \"#\",\n      icon: IconBellRinging,\n    },\n  ],\n  navCollapsible: {\n    favorites: [\n      {\n        id: \"design\",\n        title: \"Design\",\n        href: \"#\",\n        color: \"bg-green-400 dark:bg-green-300\",\n      },\n      {\n        id: \"development\",\n        title: \"Development\",\n        href: \"#\",\n        color: \"bg-blue-400 dark:bg-blue-300\",\n      },\n      {\n        id: \"workshop\",\n        title: \"Workshop\",\n        href: \"#\",\n        color: \"bg-orange-400 dark:bg-orange-300\",\n      },\n      {\n        id: \"personal\",\n        title: \"Personal\",\n        href: \"#\",\n        color: \"bg-red-400 dark:bg-red-300\",\n      },\n    ],\n    teams: [\n      {\n        id: \"engineering\",\n        title: \"Engineering\",\n        icon: IconSettingsCode,\n      },\n      {\n        id: \"marketing\",\n        title: \"Marketing\",\n        icon: IconAd2,\n      },\n    ],\n    topics: [\n      {\n        id: \"product-updates\",\n        title: \"Product Updates\",\n        icon: Package,\n      },\n      {\n        id: \"company-news\",\n        title: \"Company News\",\n        icon: IconNews,\n      },\n    ],\n  },\n};\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  return (\n    <Sidebar {...props}>\n      <NavHeader data={data} />\n      <SidebarContent>\n        <NavMain items={data.navMain} />\n        <NavCollapsible\n          favorites={data.navCollapsible.favorites}\n          teams={data.navCollapsible.teams}\n          topics={data.navCollapsible.topics}\n        />\n      </SidebarContent>\n      <NavFooter user={data.user} />\n    </Sidebar>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-01/index.tsx",
          "type": "registry:component",
          "target": "components/index.tsx",
          "content": "import {\n  SidebarInset,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\n\nexport default function Sidebar01() {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <SidebarInset>\n        <header className=\"flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-data-[collapsible=icon]/sidebar-wrapper:h-12\">\n          <div className=\"flex items-center gap-2 px-4\">\n            <SidebarTrigger className=\"sm:hidden\" />\n          </div>\n        </header>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-01/nav-collapsible.tsx",
          "type": "registry:component",
          "target": "components/nav-collapsible.tsx",
          "content": "\"use client\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { ChevronDown } from \"lucide-react\";\nimport { FavoriteItem, TeamItem, TopicItem } from \"@/components/types\";\n\ninterface NavCollapsibleProps {\n  favorites: FavoriteItem[];\n  teams: TeamItem[];\n  topics: TopicItem[];\n}\n\nexport function NavCollapsible({\n  favorites,\n  teams,\n  topics,\n}: NavCollapsibleProps) {\n  return (\n    <div className=\"space-y-0\">\n      {favorites && favorites.length > 0 && (\n        <Collapsible defaultOpen className=\"group/collapsible\">\n          <SidebarGroup>\n            <SidebarGroupLabel\n              asChild\n              className=\"text-sm hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n            >\n              <CollapsibleTrigger>\n                Favorites\n                <ChevronDown className=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180\" />\n              </CollapsibleTrigger>\n            </SidebarGroupLabel>\n            <CollapsibleContent>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {favorites.map((item) => (\n                    <SidebarMenuItem key={item.id}>\n                      <SidebarMenuButton asChild>\n                        <a href={item.href} className=\"flex items-center gap-3\">\n                          <div\n                            className={`h-3 w-3 rounded-[4px] ${item.color}`}\n                          ></div>\n                          <span>{item.title}</span>\n                        </a>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </CollapsibleContent>\n          </SidebarGroup>\n        </Collapsible>\n      )}\n\n      {teams && teams.length > 0 && (\n        <Collapsible className=\"group/collapsible\">\n          <SidebarGroup>\n            <SidebarGroupLabel\n              asChild\n              className=\"text-sm hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n            >\n              <CollapsibleTrigger>\n                Teams\n                <ChevronDown className=\"ml-auto transition-transform group-data-[state=closed]/collapsible:rotate-0 group-data-[state=open]/collapsible:rotate-180\" />\n              </CollapsibleTrigger>\n            </SidebarGroupLabel>\n            <CollapsibleContent>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {teams.map((item) => {\n                    const Icon = item.icon;\n                    return (\n                      <SidebarMenuItem key={item.id}>\n                        <SidebarMenuButton>\n                          <Icon className=\"mr-2 h-4 w-4\" />\n                          {item.title}\n                        </SidebarMenuButton>\n                      </SidebarMenuItem>\n                    );\n                  })}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </CollapsibleContent>\n          </SidebarGroup>\n        </Collapsible>\n      )}\n\n      {topics && topics.length > 0 && (\n        <Collapsible className=\"group/collapsible\">\n          <SidebarGroup>\n            <SidebarGroupLabel\n              asChild\n              className=\"text-sm hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n            >\n              <CollapsibleTrigger>\n                Topics\n                <ChevronDown className=\"ml-auto transition-transform group-data-[state=closed]/collapsible:rotate-0 group-data-[state=open]/collapsible:rotate-180\" />\n              </CollapsibleTrigger>\n            </SidebarGroupLabel>\n            <CollapsibleContent>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {topics.map((item) => {\n                    const Icon = item.icon;\n                    return (\n                      <SidebarMenuItem key={item.id}>\n                        <SidebarMenuButton>\n                          <Icon className=\"mr-2 h-4 w-4\" />\n                          {item.title}\n                        </SidebarMenuButton>\n                      </SidebarMenuItem>\n                    );\n                  })}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </CollapsibleContent>\n          </SidebarGroup>\n        </Collapsible>\n      )}\n    </div>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-01/nav-footer.tsx",
          "type": "registry:component",
          "target": "components/nav-footer.tsx",
          "content": "\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  SidebarFooter,\n  SidebarMenu,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  BookmarkPlus,\n  CircleHelp,\n  LogOut,\n  Plus,\n  PlusCircle,\n  Puzzle,\n  Settings,\n  User,\n} from \"lucide-react\";\n\nexport function NavFooter({\n  user,\n}: {\n  user: {\n    name: string;\n    email: string;\n    avatar: string;\n  };\n}) {\n  return (\n    <SidebarFooter className=\"p-4\">\n      <SidebarMenu>\n        <SidebarMenuItem>\n          <div className=\"flex items-center gap-2 justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Avatar className=\"h-8 w-8 rounded-full\">\n                    <AvatarImage src={user.avatar} alt={user.name} />\n                    <AvatarFallback className=\"rounded-full\">CN</AvatarFallback>\n                  </Avatar>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"m-2\">\n                  <DropdownMenuItem>\n                    <User size={16} className=\"opacity-80\" aria-hidden=\"true\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Settings\n                      size={16}\n                      className=\"opacity-80\"\n                      aria-hidden=\"true\"\n                    />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <LogOut\n                      size={16}\n                      className=\"opacity-80\"\n                      aria-hidden=\"true\"\n                    />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <TooltipProvider delayDuration={0}>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <CircleHelp\n                      size={16}\n                      aria-hidden=\"true\"\n                      className=\"cursor-pointer opacity-60 hover:opacity-100\"\n                    />\n                  </TooltipTrigger>\n                  <TooltipContent\n                    side=\"top\"\n                    className=\"py-1 px-2 m-2 max-w-[150px] border bg-popover text-popover-foreground\"\n                  >\n                    <div className=\"space-y-1 text-xs\">\n                      <p className=\"font-medium\">User Information</p>\n                      <p className=\"text-muted-foreground\">\n                        More details about the current user or section can be\n                        displayed here.\n                      </p>\n                    </div>\n                  </TooltipContent>\n                </Tooltip>\n              </TooltipProvider>\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"rounded-full shadow-none focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  aria-label=\"Open edit menu\"\n                >\n                  <Plus size={16} aria-hidden=\"true\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"pb-2\">\n                <DropdownMenuLabel>Add New</DropdownMenuLabel>\n                <DropdownMenuItem>\n                  <PlusCircle\n                    size={16}\n                    className=\"mr-2 opacity-80\"\n                    aria-hidden=\"true\"\n                  />\n                  Add New Item\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <BookmarkPlus\n                    size={16}\n                    className=\"mr-2 opacity-80\"\n                    aria-hidden=\"true\"\n                  />\n                  Add Bookmark\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Puzzle\n                    size={16}\n                    className=\"mr-2 opacity-80\"\n                    aria-hidden=\"true\"\n                  />\n                  Add Integration\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarFooter>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-01/nav-header.tsx",
          "type": "registry:component",
          "target": "components/nav-header.tsx",
          "content": "\"use client\";\n\nimport { Search } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport {\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport { SidebarHeader } from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { useEffect } from \"react\";\nimport { SidebarData } from \"@/components/types\";\n\ninterface NavHeaderProps {\n  data: SidebarData;\n}\n\nexport function NavHeader({ data }: NavHeaderProps) {\n  const [open, setOpen] = React.useState(false);\n\n  useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n\n  return (\n    <>\n      <SidebarHeader>\n        <div\n          className=\"flex items-center justify-between px-2 pb-0 pt-3 cursor-pointer\"\n          onClick={() => setOpen(true)}\n        >\n          <div className=\"flex items-center flex-1 gap-3\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-sm text-muted-foreground font-normal\">\n              Search\n            </span>\n          </div>\n          <div className=\"flex items-center justify-center px-2 py-1 border border-border rounded-md\">\n            <kbd className=\"text-muted-foreground inline-flex font-[inherit] text-xs font-medium\">\n              <span className=\"opacity-70\">⌘K</span>\n            </kbd>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Search everything...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Navigation\">\n            {data.navMain.map((item) => (\n              <CommandItem\n                className=\"py-2!\"\n                key={item.id}\n                onSelect={() => {\n                  setOpen(false);\n                }}\n              >\n                <item.icon className=\"mr-2 h-4 w-4\" />\n                <span>{item.title}</span>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n          <CommandSeparator className=\"my-2\" />\n          <CommandGroup heading=\"Favorites\">\n            {data.navCollapsible.favorites.map((item) => (\n              <CommandItem\n                className=\"py-2!\"\n                key={item.id}\n                onSelect={() => {\n                  setOpen(false);\n                }}\n              >\n                <div className={cn(\"mr-2 h-3 w-3 rounded-full\", item.color)} />\n                <span>{item.title}</span>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n          <CommandSeparator className=\"my-2\" />\n          <CommandGroup heading=\"Teams\">\n            {data.navCollapsible.teams.map((item) => (\n              <CommandItem\n                className=\"py-2!\"\n                key={item.id}\n                onSelect={() => {\n                  setOpen(false);\n                }}\n              >\n                <item.icon className=\"mr-2 h-4 w-4\" />\n                <span>{item.title}</span>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n          <CommandSeparator className=\"my-2\" />\n          <CommandGroup heading=\"Topics\">\n            {data.navCollapsible.topics.map((item) => (\n              <CommandItem\n                className=\"py-2!\"\n                key={item.id}\n                onSelect={() => {\n                  setOpen(false);\n                }}\n              >\n                <item.icon className=\"mr-2 h-4 w-4\" />\n                <span>{item.title}</span>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-01/nav-main.tsx",
          "type": "registry:component",
          "target": "components/nav-main.tsx",
          "content": "\"use client\";\n\nimport {\n  SidebarGroup,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport type { NavItem } from \"./types\";\n\nexport function NavMain({ items }: { items: NavItem[] }) {\n  return (\n    <SidebarGroup>\n      <SidebarMenu>\n        {items.map((item) => {\n          const Icon = item.icon;\n\n          return (\n            <SidebarMenuItem key={item.id}>\n              <SidebarMenuButton tooltip={item.title}>\n                {Icon && <Icon className=\"mr-2 h-4 w-4\" />}\n                <span>{item.title}</span>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          );\n        })}\n      </SidebarMenu>\n    </SidebarGroup>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-01/types.ts",
          "type": "registry:component",
          "target": "components/types.ts",
          "content": "import type { ElementType } from \"react\";\n\nexport interface NavItem {\n  id: string;\n  title: string;\n  icon: ElementType;\n  url?: string;\n  isActive?: boolean;\n}\n\nexport interface User {\n  name: string;\n  email: string;\n  avatar: string;\n}\n\nexport interface FavoriteItem {\n  id: string;\n  title: string;\n  href: string;\n  color: string;\n}\n\nexport interface TeamItem {\n  id: string;\n  title: string;\n  icon: ElementType;\n}\n\nexport interface TopicItem {\n  id: string;\n  title: string;\n  icon: ElementType;\n}\n\nexport interface SidebarData {\n  user: User;\n  navMain: NavItem[];\n  navCollapsible: {\n    favorites: FavoriteItem[];\n    teams: TeamItem[];\n    topics: TopicItem[];\n  };\n}\n"
        }
      ],
      "categories": ["sidebar"]
    },
    {
      "name": "sidebar-02",
      "type": "registry:block",
      "title": "Sidebar",
      "description": "A sidebar block.",
      "author": "Gocha Gochitashvili <https://lost-ui.vercel.app>",
      "registryDependencies": [
        "avatar",
        "button",
        "collapsible",
        "dropdown-menu",
        "sidebar"
      ],
      "dependencies": ["framer-motion", "lucide-react"],
      "files": [
        {
          "path": "content/components/sidebar/sidebar-02/app-sidebar.tsx",
          "type": "registry:component",
          "target": "components/app-sidebar.tsx",
          "content": "\"use client\";\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarTrigger,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport {\n  Activity,\n  DollarSign,\n  Home,\n  Infinity,\n  LinkIcon,\n  Package2,\n  Percent,\n  PieChart,\n  Settings,\n  ShoppingBag,\n  Sparkles,\n  Store,\n  TrendingUp,\n  Users,\n} from \"lucide-react\";\nimport { Logo } from \"@/components/logo\";\nimport type { Route } from \"./nav-main\";\nimport DashboardNavigation from \"@/components/nav-main\";\nimport { NotificationsPopover } from \"@/components/nav-notifications\";\nimport { TeamSwitcher } from \"@/components/team-switcher\";\n\nconst sampleNotifications = [\n  {\n    id: \"1\",\n    avatar: \"/avatars/01.png\",\n    fallback: \"OM\",\n    text: \"New order received.\",\n    time: \"10m ago\",\n  },\n  {\n    id: \"2\",\n    avatar: \"/avatars/02.png\",\n    fallback: \"JL\",\n    text: \"Server upgrade completed.\",\n    time: \"1h ago\",\n  },\n  {\n    id: \"3\",\n    avatar: \"/avatars/03.png\",\n    fallback: \"HH\",\n    text: \"New user signed up.\",\n    time: \"2h ago\",\n  },\n];\n\nconst dashboardRoutes: Route[] = [\n  {\n    id: \"home\",\n    title: \"Home\",\n    icon: <Home className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"products\",\n    title: \"Products\",\n    icon: <Package2 className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      {\n        title: \"Catalogue\",\n        link: \"#\",\n        icon: <Package2 className=\"size-4\" />,\n      },\n      {\n        title: \"Checkout Links\",\n        link: \"#\",\n        icon: <LinkIcon className=\"size-4\" />,\n      },\n      {\n        title: \"Discounts\",\n        link: \"#\",\n        icon: <Percent className=\"size-4\" />,\n      },\n    ],\n  },\n  {\n    id: \"usage-billing\",\n    title: \"Usage Billing\",\n    icon: <PieChart className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      {\n        title: \"Meters\",\n        link: \"#\",\n        icon: <PieChart className=\"size-4\" />,\n      },\n      {\n        title: \"Events\",\n        link: \"#\",\n        icon: <Activity className=\"size-4\" />,\n      },\n    ],\n  },\n  {\n    id: \"benefits\",\n    title: \"Benefits\",\n    icon: <Sparkles className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"customers\",\n    title: \"Customers\",\n    icon: <Users className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"sales\",\n    title: \"Sales\",\n    icon: <ShoppingBag className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      {\n        title: \"Orders\",\n        link: \"#\",\n        icon: <ShoppingBag className=\"size-4\" />,\n      },\n      {\n        title: \"Subscriptions\",\n        link: \"#\",\n        icon: <Infinity className=\"size-4\" />,\n      },\n    ],\n  },\n  {\n    id: \"storefront\",\n    title: \"Storefront\",\n    icon: <Store className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"analytics\",\n    title: \"Analytics\",\n    icon: <TrendingUp className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"finance\",\n    title: \"Finance\",\n    icon: <DollarSign className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      { title: \"Incoming\", link: \"#\" },\n      { title: \"Outgoing\", link: \"#\" },\n      { title: \"Payout Account\", link: \"#\" },\n    ],\n  },\n  {\n    id: \"settings\",\n    title: \"Settings\",\n    icon: <Settings className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      { title: \"General\", link: \"#\" },\n      { title: \"Webhooks\", link: \"#\" },\n      { title: \"Custom Fields\", link: \"#\" },\n    ],\n  },\n];\n\nconst teams = [\n  { id: \"1\", name: \"Alpha Inc.\", logo: Logo, plan: \"Free\" },\n  { id: \"2\", name: \"Beta Corp.\", logo: Logo, plan: \"Free\" },\n  { id: \"3\", name: \"Gamma Tech\", logo: Logo, plan: \"Free\" },\n];\n\nexport function DashboardSidebar() {\n  const { state } = useSidebar();\n  const isCollapsed = state === \"collapsed\";\n\n  return (\n    <Sidebar variant=\"inset\" collapsible=\"icon\">\n      <SidebarHeader\n        className={cn(\n          \"flex md:pt-3.5\",\n          isCollapsed\n            ? \"flex-row items-center justify-between gap-y-4 md:flex-col md:items-start md:justify-start\"\n            : \"flex-row items-center justify-between\"\n        )}\n      >\n        <a href=\"#\" className=\"flex items-center gap-2\">\n          <Logo className=\"h-8 w-8\" />\n          {!isCollapsed && (\n            <span className=\"font-semibold text-black dark:text-white\">\n              Acme\n            </span>\n          )}\n        </a>\n\n        <motion.div\n          key={isCollapsed ? \"header-collapsed\" : \"header-expanded\"}\n          className={cn(\n            \"flex items-center gap-2\",\n            isCollapsed ? \"flex-row md:flex-col-reverse\" : \"flex-row\"\n          )}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8 }}\n        >\n          <NotificationsPopover notifications={sampleNotifications} />\n          <SidebarTrigger />\n        </motion.div>\n      </SidebarHeader>\n      <SidebarContent className=\"gap-4 px-2 py-4\">\n        <DashboardNavigation routes={dashboardRoutes} />\n      </SidebarContent>\n      <SidebarFooter className=\"px-2\">\n        <TeamSwitcher teams={teams} />\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-02/index.tsx",
          "type": "registry:component",
          "target": "components/index.tsx",
          "content": "import { SidebarInset, SidebarProvider } from \"@/components/ui/sidebar\";\nimport { DashboardSidebar } from \"@/components/app-sidebar\";\n\nexport default function Sidebar02() {\n  return (\n    <SidebarProvider>\n      <div className=\"relative flex h-screen w-full\">\n        <DashboardSidebar />\n        <SidebarInset className=\"flex flex-col\" />\n      </div>\n    </SidebarProvider>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-02/logo.tsx",
          "type": "registry:component",
          "target": "components/logo.tsx",
          "content": "import { SVGProps } from \"react\";\n\nexport const Logo = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    fill=\"currentColor\"\n    height=\"48\"\n    viewBox=\"0 0 40 48\"\n    width=\"40\"\n    {...props}\n  >\n    <clipPath id=\"a\">\n      <path d=\"m0 0h40v48h-40z\" />\n    </clipPath>\n    <g clipPath=\"url(#a)\">\n      <path d=\"m25.0887 5.05386-3.933-1.05386-3.3145 12.3696-2.9923-11.16736-3.9331 1.05386 3.233 12.0655-8.05262-8.0526-2.87919 2.8792 8.83271 8.8328-10.99975-2.9474-1.05385625 3.933 12.01860625 3.2204c-.1376-.5935-.2104-1.2119-.2104-1.8473 0-4.4976 3.646-8.1436 8.1437-8.1436 4.4976 0 8.1436 3.646 8.1436 8.1436 0 .6313-.0719 1.2459-.2078 1.8359l10.9227 2.9267 1.0538-3.933-12.0664-3.2332 11.0005-2.9476-1.0539-3.933-12.0659 3.233 8.0526-8.0526-2.8792-2.87916-8.7102 8.71026z\" />\n      <path d=\"m27.8723 26.2214c-.3372 1.4256-1.0491 2.7063-2.0259 3.7324l7.913 7.9131 2.8792-2.8792z\" />\n      <path d=\"m25.7665 30.0366c-.9886 1.0097-2.2379 1.7632-3.6389 2.1515l2.8794 10.746 3.933-1.0539z\" />\n      <path d=\"m21.9807 32.2274c-.65.1671-1.3313.2559-2.0334.2559-.7522 0-1.4806-.102-2.1721-.2929l-2.882 10.7558 3.933 1.0538z\" />\n      <path d=\"m17.6361 32.1507c-1.3796-.4076-2.6067-1.1707-3.5751-2.1833l-7.9325 7.9325 2.87919 2.8792z\" />\n      <path d=\"m13.9956 29.8973c-.9518-1.019-1.6451-2.2826-1.9751-3.6862l-10.95836 2.9363 1.05385 3.933z\" />\n    </g>\n  </svg>\n);\n"
        },
        {
          "path": "content/components/sidebar/sidebar-02/nav-main.tsx",
          "type": "registry:component",
          "target": "components/nav-main.tsx",
          "content": "\"use client\";\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuItem as SidebarMenuSubItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\nimport Link from \"next/link\";\nimport type React from \"react\";\nimport { useState } from \"react\";\n\nexport type Route = {\n  id: string;\n  title: string;\n  icon?: React.ReactNode;\n  link: string;\n  subs?: {\n    title: string;\n    link: string;\n    icon?: React.ReactNode;\n  }[];\n};\n\nexport default function DashboardNavigation({ routes }: { routes: Route[] }) {\n  const { state } = useSidebar();\n  const isCollapsed = state === \"collapsed\";\n  const [openCollapsible, setOpenCollapsible] = useState<string | null>(null);\n\n  return (\n    <SidebarMenu>\n      {routes.map((route) => {\n        const isOpen = !isCollapsed && openCollapsible === route.id;\n        const hasSubRoutes = !!route.subs?.length;\n\n        return (\n          <SidebarMenuItem key={route.id}>\n            {hasSubRoutes ? (\n              <Collapsible\n                open={isOpen}\n                onOpenChange={(open) =>\n                  setOpenCollapsible(open ? route.id : null)\n                }\n                className=\"w-full\"\n              >\n                <CollapsibleTrigger asChild>\n                  <SidebarMenuButton\n                    className={cn(\n                      \"flex w-full items-center rounded-lg px-2 transition-colors\",\n                      isOpen\n                        ? \"bg-sidebar-muted text-foreground\"\n                        : \"text-muted-foreground hover:bg-sidebar-muted hover:text-foreground\",\n                      isCollapsed && \"justify-center\"\n                    )}\n                  >\n                    {route.icon}\n                    {!isCollapsed && (\n                      <span className=\"ml-2 flex-1 text-sm font-medium\">\n                        {route.title}\n                      </span>\n                    )}\n                    {!isCollapsed && hasSubRoutes && (\n                      <span className=\"ml-auto\">\n                        {isOpen ? (\n                          <ChevronUp className=\"size-4\" />\n                        ) : (\n                          <ChevronDown className=\"size-4\" />\n                        )}\n                      </span>\n                    )}\n                  </SidebarMenuButton>\n                </CollapsibleTrigger>\n\n                {!isCollapsed && (\n                  <CollapsibleContent>\n                    <SidebarMenuSub className=\"my-1 ml-3.5 \">\n                      {route.subs?.map((subRoute) => (\n                        <SidebarMenuSubItem\n                          key={`${route.id}-${subRoute.title}`}\n                          className=\"h-auto\"\n                        >\n                          <SidebarMenuSubButton asChild>\n                            <Link\n                              href={subRoute.link}\n                              prefetch={true}\n                              className=\"flex items-center rounded-md px-4 py-1.5 text-sm font-medium text-muted-foreground hover:bg-sidebar-muted hover:text-foreground\"\n                            >\n                              {subRoute.title}\n                            </Link>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                      ))}\n                    </SidebarMenuSub>\n                  </CollapsibleContent>\n                )}\n              </Collapsible>\n            ) : (\n              <SidebarMenuButton tooltip={route.title} asChild>\n                <Link\n                  href={route.link}\n                  prefetch={true}\n                  className={cn(\n                    \"flex items-center rounded-lg px-2 transition-colors text-muted-foreground hover:bg-sidebar-muted hover:text-foreground\",\n                    isCollapsed && \"justify-center\"\n                  )}\n                >\n                  {route.icon}\n                  {!isCollapsed && (\n                    <span className=\"ml-2 text-sm font-medium\">\n                      {route.title}\n                    </span>\n                  )}\n                </Link>\n              </SidebarMenuButton>\n            )}\n          </SidebarMenuItem>\n        );\n      })}\n    </SidebarMenu>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-02/nav-notifications.tsx",
          "type": "registry:component",
          "target": "components/nav-notifications.tsx",
          "content": "\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { BellIcon } from \"lucide-react\";\n\ntype Notification = {\n  id: string;\n  avatar: string;\n  fallback: string;\n  text: string;\n  time: string;\n};\n\nexport function NotificationsPopover({\n  notifications,\n}: {\n  notifications: Notification[];\n}) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"rounded-full\"\n          aria-label=\"Open notifications\"\n        >\n          <BellIcon className=\"size-5\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent side=\"right\" className=\"w-80 my-6\">\n        <DropdownMenuLabel>Notifications</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {notifications.map(({ id, avatar, fallback, text, time }) => (\n          <DropdownMenuItem key={id} className=\"flex items-start gap-3\">\n            <Avatar className=\"size-8\">\n              <AvatarImage src={avatar} alt=\"Avatar\" />\n              <AvatarFallback>{fallback}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex flex-col\">\n              <span className=\"text-sm font-medium\">{text}</span>\n              <span className=\"text-xs text-muted-foreground\">{time}</span>\n            </div>\n          </DropdownMenuItem>\n        ))}\n        <DropdownMenuSeparator />\n        <DropdownMenuItem className=\"justify-center text-sm text-muted-foreground hover:text-primary\">\n          View all notifications\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-02/team-switcher.tsx",
          "type": "registry:component",
          "target": "components/team-switcher.tsx",
          "content": "\"use client\";\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { ChevronsUpDown, Plus } from \"lucide-react\";\nimport * as React from \"react\";\n\ntype Team = {\n  name: string;\n  logo: React.ElementType;\n  plan: string;\n};\n\nexport function TeamSwitcher({ teams }: { teams: Team[] }) {\n  const { isMobile } = useSidebar();\n  const [activeTeam, setActiveTeam] = React.useState(teams[0]);\n\n  if (!activeTeam) return null;\n\n  const Logo = activeTeam.logo;\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg bg-background text-foreground\">\n                <Logo className=\"size-4\" />\n              </div>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-semibold\">\n                  {activeTeam.name}\n                </span>\n                <span className=\"truncate text-xs\">{activeTeam.plan}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg mb-4\"\n            align=\"start\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"text-xs text-muted-foreground\">\n              Teams\n            </DropdownMenuLabel>\n            {teams.map((team, index) => (\n              <DropdownMenuItem\n                key={team.name}\n                onClick={() => setActiveTeam(team)}\n                className=\"gap-2 p-2\"\n              >\n                <div className=\"flex size-6 items-center justify-center rounded-sm border\">\n                  <team.logo className=\"size-4 shrink-0\" />\n                </div>\n                {team.name}\n                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            ))}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"gap-2 p-2\">\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-background\">\n                <Plus className=\"size-4\" />\n              </div>\n              <div className=\"font-medium text-muted-foreground\">Add team</div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  );\n}\n"
        }
      ],
      "categories": ["sidebar"]
    },
    {
      "name": "sidebar-03",
      "type": "registry:block",
      "title": "Floating Sidebar",
      "description": "A floating sidebar block.",
      "author": "Gocha Gochitashvili <https://lost-ui.vercel.app>",
      "registryDependencies": [
        "avatar",
        "button",
        "collapsible",
        "dropdown-menu",
        "sidebar"
      ],
      "dependencies": ["framer-motion", "lucide-react"],
      "files": [
        {
          "path": "content/components/sidebar/sidebar-03/app-sidebar.tsx",
          "type": "registry:component",
          "target": "components/app-sidebar.tsx",
          "content": "\"use client\";\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarTrigger,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport {\n  Activity,\n  DollarSign,\n  Home,\n  Infinity,\n  LinkIcon,\n  Package2,\n  Percent,\n  PieChart,\n  Settings,\n  ShoppingBag,\n  Sparkles,\n  Store,\n  TrendingUp,\n  Users,\n} from \"lucide-react\";\nimport { Logo } from \"@/components/logo\";\nimport type { Route } from \"./nav-main\";\nimport DashboardNavigation from \"@/components/nav-main\";\nimport { NotificationsPopover } from \"@/components/nav-notifications\";\nimport { TeamSwitcher } from \"@/components/team-switcher\";\n\nconst sampleNotifications = [\n  {\n    id: \"1\",\n    avatar: \"/avatars/01.png\",\n    fallback: \"OM\",\n    text: \"New order received.\",\n    time: \"10m ago\",\n  },\n  {\n    id: \"2\",\n    avatar: \"/avatars/02.png\",\n    fallback: \"JL\",\n    text: \"Server upgrade completed.\",\n    time: \"1h ago\",\n  },\n  {\n    id: \"3\",\n    avatar: \"/avatars/03.png\",\n    fallback: \"HH\",\n    text: \"New user signed up.\",\n    time: \"2h ago\",\n  },\n];\n\nconst dashboardRoutes: Route[] = [\n  {\n    id: \"home\",\n    title: \"Home\",\n    icon: <Home className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"products\",\n    title: \"Products\",\n    icon: <Package2 className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      {\n        title: \"Catalogue\",\n        link: \"#\",\n        icon: <Package2 className=\"size-4\" />,\n      },\n      {\n        title: \"Checkout Links\",\n        link: \"#\",\n        icon: <LinkIcon className=\"size-4\" />,\n      },\n      {\n        title: \"Discounts\",\n        link: \"#\",\n        icon: <Percent className=\"size-4\" />,\n      },\n    ],\n  },\n  {\n    id: \"usage-billing\",\n    title: \"Usage Billing\",\n    icon: <PieChart className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      {\n        title: \"Meters\",\n        link: \"#\",\n        icon: <PieChart className=\"size-4\" />,\n      },\n      {\n        title: \"Events\",\n        link: \"#\",\n        icon: <Activity className=\"size-4\" />,\n      },\n    ],\n  },\n  {\n    id: \"benefits\",\n    title: \"Benefits\",\n    icon: <Sparkles className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"customers\",\n    title: \"Customers\",\n    icon: <Users className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"sales\",\n    title: \"Sales\",\n    icon: <ShoppingBag className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      {\n        title: \"Orders\",\n        link: \"#\",\n        icon: <ShoppingBag className=\"size-4\" />,\n      },\n      {\n        title: \"Subscriptions\",\n        link: \"#\",\n        icon: <Infinity className=\"size-4\" />,\n      },\n    ],\n  },\n  {\n    id: \"storefront\",\n    title: \"Storefront\",\n    icon: <Store className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"analytics\",\n    title: \"Analytics\",\n    icon: <TrendingUp className=\"size-4\" />,\n    link: \"#\",\n  },\n  {\n    id: \"finance\",\n    title: \"Finance\",\n    icon: <DollarSign className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      { title: \"Incoming\", link: \"#\" },\n      { title: \"Outgoing\", link: \"#\" },\n      { title: \"Payout Account\", link: \"#\" },\n    ],\n  },\n  {\n    id: \"settings\",\n    title: \"Settings\",\n    icon: <Settings className=\"size-4\" />,\n    link: \"#\",\n    subs: [\n      { title: \"General\", link: \"#\" },\n      { title: \"Webhooks\", link: \"#\" },\n      { title: \"Custom Fields\", link: \"#\" },\n    ],\n  },\n];\n\nconst teams = [\n  { id: \"1\", name: \"Alpha Inc.\", logo: Logo, plan: \"Free\" },\n  { id: \"2\", name: \"Beta Corp.\", logo: Logo, plan: \"Free\" },\n  { id: \"3\", name: \"Gamma Tech\", logo: Logo, plan: \"Free\" },\n];\n\nexport function DashboardSidebar() {\n  const { state } = useSidebar();\n  const isCollapsed = state === \"collapsed\";\n\n  return (\n    <Sidebar variant=\"floating\" collapsible=\"icon\">\n      <SidebarHeader\n        className={cn(\n          \"flex md:pt-3.5\",\n          isCollapsed\n            ? \"flex-row items-center justify-between gap-y-4 md:flex-col md:items-start md:justify-start\"\n            : \"flex-row items-center justify-between\"\n        )}\n      >\n        <a href=\"#\" className=\"flex items-center gap-2\">\n          <Logo className=\"h-8 w-8\" />\n          {!isCollapsed && (\n            <span className=\"font-semibold text-black dark:text-white\">\n              Acme\n            </span>\n          )}\n        </a>\n\n        <motion.div\n          key={isCollapsed ? \"header-collapsed\" : \"header-expanded\"}\n          className={cn(\n            \"flex items-center gap-2\",\n            isCollapsed ? \"flex-row md:flex-col-reverse\" : \"flex-row\"\n          )}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8 }}\n        >\n          <NotificationsPopover notifications={sampleNotifications} />\n          <SidebarTrigger />\n        </motion.div>\n      </SidebarHeader>\n      <SidebarContent className=\"gap-4 px-2 py-4\">\n        <DashboardNavigation routes={dashboardRoutes} />\n      </SidebarContent>\n      <SidebarFooter className=\"px-2\">\n        <TeamSwitcher teams={teams} />\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-03/index.tsx",
          "type": "registry:component",
          "target": "components/index.tsx",
          "content": "import { SidebarInset, SidebarProvider } from \"@/components/ui/sidebar\";\nimport { DashboardSidebar } from \"@/components/app-sidebar\";\n\nexport default function Sidebar03() {\n  return (\n    <SidebarProvider>\n      <div className=\"relative flex h-screen w-full\">\n        <DashboardSidebar />\n        <SidebarInset className=\"flex flex-col\" />\n      </div>\n    </SidebarProvider>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-03/logo.tsx",
          "type": "registry:component",
          "target": "components/logo.tsx",
          "content": "import type { SVGProps } from \"react\";\n\nexport const Logo = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    fill=\"currentColor\"\n    height=\"48\"\n    viewBox=\"0 0 40 48\"\n    width=\"40\"\n    {...props}\n  >\n    <title>Logo</title>\n    <clipPath id=\"a\">\n      <path d=\"m0 0h40v48h-40z\" />\n    </clipPath>\n    <g clipPath=\"url(#a)\">\n      <path d=\"m25.0887 5.05386-3.933-1.05386-3.3145 12.3696-2.9923-11.16736-3.9331 1.05386 3.233 12.0655-8.05262-8.0526-2.87919 2.8792 8.83271 8.8328-10.99975-2.9474-1.05385625 3.933 12.01860625 3.2204c-.1376-.5935-.2104-1.2119-.2104-1.8473 0-4.4976 3.646-8.1436 8.1437-8.1436 4.4976 0 8.1436 3.646 8.1436 8.1436 0 .6313-.0719 1.2459-.2078 1.8359l10.9227 2.9267 1.0538-3.933-12.0664-3.2332 11.0005-2.9476-1.0539-3.933-12.0659 3.233 8.0526-8.0526-2.8792-2.87916-8.7102 8.71026z\" />\n      <path d=\"m27.8723 26.2214c-.3372 1.4256-1.0491 2.7063-2.0259 3.7324l7.913 7.9131 2.8792-2.8792z\" />\n      <path d=\"m25.7665 30.0366c-.9886 1.0097-2.2379 1.7632-3.6389 2.1515l2.8794 10.746 3.933-1.0539z\" />\n      <path d=\"m21.9807 32.2274c-.65.1671-1.3313.2559-2.0334.2559-.7522 0-1.4806-.102-2.1721-.2929l-2.882 10.7558 3.933 1.0538z\" />\n      <path d=\"m17.6361 32.1507c-1.3796-.4076-2.6067-1.1707-3.5751-2.1833l-7.9325 7.9325 2.87919 2.8792z\" />\n      <path d=\"m13.9956 29.8973c-.9518-1.019-1.6451-2.2826-1.9751-3.6862l-10.95836 2.9363 1.05385 3.933z\" />\n    </g>\n  </svg>\n);\n"
        },
        {
          "path": "content/components/sidebar/sidebar-03/nav-main.tsx",
          "type": "registry:component",
          "target": "components/nav-main.tsx",
          "content": "\"use client\";\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuItem as SidebarMenuSubItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\nimport Link from \"next/link\";\nimport type React from \"react\";\nimport { useState } from \"react\";\n\nexport type Route = {\n  id: string;\n  title: string;\n  icon?: React.ReactNode;\n  link: string;\n  subs?: {\n    title: string;\n    link: string;\n    icon?: React.ReactNode;\n  }[];\n};\n\nexport default function DashboardNavigation({ routes }: { routes: Route[] }) {\n  const { state } = useSidebar();\n  const isCollapsed = state === \"collapsed\";\n  const [openCollapsible, setOpenCollapsible] = useState<string | null>(null);\n\n  return (\n    <SidebarMenu>\n      {routes.map((route) => {\n        const isOpen = !isCollapsed && openCollapsible === route.id;\n        const hasSubRoutes = !!route.subs?.length;\n\n        return (\n          <SidebarMenuItem key={route.id}>\n            {hasSubRoutes ? (\n              <Collapsible\n                open={isOpen}\n                onOpenChange={(open) =>\n                  setOpenCollapsible(open ? route.id : null)\n                }\n                className=\"w-full\"\n              >\n                <CollapsibleTrigger asChild>\n                  <SidebarMenuButton\n                    className={cn(\n                      \"flex w-full items-center rounded-lg px-2 transition-colors\",\n                      isOpen\n                        ? \"bg-sidebar-muted text-foreground\"\n                        : \"text-muted-foreground hover:bg-sidebar-muted hover:text-foreground\",\n                      isCollapsed && \"justify-center\"\n                    )}\n                  >\n                    {route.icon}\n                    {!isCollapsed && (\n                      <span className=\"ml-2 flex-1 text-sm font-medium\">\n                        {route.title}\n                      </span>\n                    )}\n                    {!isCollapsed && hasSubRoutes && (\n                      <span className=\"ml-auto\">\n                        {isOpen ? (\n                          <ChevronUp className=\"size-4\" />\n                        ) : (\n                          <ChevronDown className=\"size-4\" />\n                        )}\n                      </span>\n                    )}\n                  </SidebarMenuButton>\n                </CollapsibleTrigger>\n\n                {!isCollapsed && (\n                  <CollapsibleContent>\n                    <SidebarMenuSub className=\"my-1 ml-3.5 \">\n                      {route.subs?.map((subRoute) => (\n                        <SidebarMenuSubItem\n                          key={`${route.id}-${subRoute.title}`}\n                          className=\"h-auto\"\n                        >\n                          <SidebarMenuSubButton asChild>\n                            <Link\n                              href={subRoute.link}\n                              prefetch={true}\n                              className=\"flex items-center rounded-md px-4 py-1.5 text-sm font-medium text-muted-foreground hover:bg-sidebar-muted hover:text-foreground\"\n                            >\n                              {subRoute.title}\n                            </Link>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                      ))}\n                    </SidebarMenuSub>\n                  </CollapsibleContent>\n                )}\n              </Collapsible>\n            ) : (\n              <SidebarMenuButton tooltip={route.title} asChild>\n                <Link\n                  href={route.link}\n                  prefetch={true}\n                  className={cn(\n                    \"flex items-center rounded-lg px-2 transition-colors text-muted-foreground hover:bg-sidebar-muted hover:text-foreground\",\n                    isCollapsed && \"justify-center\"\n                  )}\n                >\n                  {route.icon}\n                  {!isCollapsed && (\n                    <span className=\"ml-2 text-sm font-medium\">\n                      {route.title}\n                    </span>\n                  )}\n                </Link>\n              </SidebarMenuButton>\n            )}\n          </SidebarMenuItem>\n        );\n      })}\n    </SidebarMenu>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-03/nav-notifications.tsx",
          "type": "registry:component",
          "target": "components/nav-notifications.tsx",
          "content": "\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { BellIcon } from \"lucide-react\";\n\ntype Notification = {\n  id: string;\n  avatar: string;\n  fallback: string;\n  text: string;\n  time: string;\n};\n\nexport function NotificationsPopover({\n  notifications,\n}: {\n  notifications: Notification[];\n}) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"rounded-full\"\n          aria-label=\"Open notifications\"\n        >\n          <BellIcon className=\"size-5\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent side=\"right\" className=\"w-80 my-6\">\n        <DropdownMenuLabel>Notifications</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {notifications.map(({ id, avatar, fallback, text, time }) => (\n          <DropdownMenuItem key={id} className=\"flex items-start gap-3\">\n            <Avatar className=\"size-8\">\n              <AvatarImage src={avatar} alt=\"Avatar\" />\n              <AvatarFallback>{fallback}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex flex-col\">\n              <span className=\"text-sm font-medium\">{text}</span>\n              <span className=\"text-xs text-muted-foreground\">{time}</span>\n            </div>\n          </DropdownMenuItem>\n        ))}\n        <DropdownMenuSeparator />\n        <DropdownMenuItem className=\"justify-center text-sm text-muted-foreground hover:text-primary\">\n          View all notifications\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-03/team-switcher.tsx",
          "type": "registry:component",
          "target": "components/team-switcher.tsx",
          "content": "\"use client\";\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { ChevronsUpDown, Plus } from \"lucide-react\";\nimport * as React from \"react\";\n\ntype Team = {\n  name: string;\n  logo: React.ElementType;\n  plan: string;\n};\n\nexport function TeamSwitcher({ teams }: { teams: Team[] }) {\n  const { isMobile } = useSidebar();\n  const [activeTeam, setActiveTeam] = React.useState(teams[0]);\n\n  if (!activeTeam) return null;\n\n  const Logo = activeTeam.logo;\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg bg-background text-foreground\">\n                <Logo className=\"size-4\" />\n              </div>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-semibold\">\n                  {activeTeam.name}\n                </span>\n                <span className=\"truncate text-xs\">{activeTeam.plan}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg mb-4\"\n            align=\"start\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"text-xs text-muted-foreground\">\n              Teams\n            </DropdownMenuLabel>\n            {teams.map((team, index) => (\n              <DropdownMenuItem\n                key={team.name}\n                onClick={() => setActiveTeam(team)}\n                className=\"gap-2 p-2\"\n              >\n                <div className=\"flex size-6 items-center justify-center rounded-sm border\">\n                  <team.logo className=\"size-4 shrink-0\" />\n                </div>\n                {team.name}\n                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            ))}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"gap-2 p-2\">\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-background\">\n                <Plus className=\"size-4\" />\n              </div>\n              <div className=\"font-medium text-muted-foreground\">Add team</div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  );\n}\n"
        }
      ],
      "categories": ["sidebar"]
    },
    {
      "name": "sidebar-04",
      "type": "registry:block",
      "title": "Double Sided Sidebar",
      "description": "A double sided sidebar block.",
      "author": "Gocha Gochitashvili <https://lost-ui.vercel.app>",
      "registryDependencies": ["avatar", "dropdown-menu", "sidebar"],
      "dependencies": ["@tabler/icons-react", "lucide-react"],
      "files": [
        {
          "path": "content/components/sidebar/sidebar-04/app/page.tsx",
          "type": "registry:page",
          "target": "app/page.tsx",
          "content": "\"use client\";\n\nimport { SidebarInset, SidebarProvider } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { MailProvider, useMail } from \"@/components/mail-context\";\n\nfunction MailPreview() {\n  const { selectedMail } = useMail();\n  if (!selectedMail) {\n    return (\n      <div className=\"flex h-full items-center justify-center text-sm text-muted-foreground\">\n        Select an email to preview\n      </div>\n    );\n  }\n  return (\n    <div className=\"flex h-full flex-col\">\n      <div className=\"border-b p-4\">\n        <div className=\"text-lg font-semibold\">{selectedMail.subject}</div>\n        <div className=\"text-sm text-muted-foreground\">\n          From: {selectedMail.name} ({selectedMail.email})\n        </div>\n      </div>\n      <div className=\"p-4 text-sm whitespace-pre-wrap\">{`${selectedMail.teaser}\\n\\nThis is a sample message body for the selected email.\\nIt demonstrates the preview area on the right side.`}</div>\n    </div>\n  );\n}\n\nexport default function Page() {\n  return (\n    <SidebarProvider>\n      <MailProvider>\n        <div className=\"flex h-screen w-full\">\n          <AppSidebar />\n          <SidebarInset>\n            <div className=\"flex-1 rounded-xl border m-2\">\n              <MailPreview />\n            </div>\n          </SidebarInset>\n        </div>\n      </MailProvider>\n    </SidebarProvider>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-04/app-sidebar.tsx",
          "type": "registry:component",
          "target": "components/app-sidebar.tsx",
          "content": "\"use client\";\n\nimport { Archive, Flag } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport {\n  IconBrandAmongUs,\n  IconCarambola,\n  IconHourglassHigh,\n  IconMailbox,\n} from \"@tabler/icons-react\";\nimport { useMail } from \"@/components/mail-context\";\nimport { NavUser } from \"@/components/nav-user\";\n\n// This is sample data\nconst data = {\n  user: {\n    name: \"ephraim\",\n    email: \"ephraim@lost-ui.vercel.app\",\n    avatar: \"/avatar-01.png\",\n  },\n  navMain: [\n    {\n      title: \"Inbox\",\n      url: \"#\",\n      icon: IconMailbox,\n      isActive: true,\n    },\n    {\n      title: \"Starred\",\n      url: \"#\",\n      icon: IconCarambola,\n      isActive: false,\n    },\n    {\n      title: \"Important\",\n      url: \"#\",\n      icon: Flag,\n      isActive: false,\n    },\n    {\n      title: \"Scheduled\",\n      url: \"#\",\n      icon: IconHourglassHigh,\n      isActive: false,\n    },\n    {\n      title: \"Archive\",\n      url: \"#\",\n      icon: Archive,\n      isActive: false,\n    },\n  ],\n  labels: [\n    { title: \"Personal\", color: \"bg-green-400 dark:bg-green-300\" },\n    { title: \"Work\", color: \"bg-blue-400 dark:bg-blue-300\" },\n    { title: \"Travel\", color: \"bg-orange-400 dark:bg-orange-300\" },\n    { title: \"Receipts\", color: \"bg-purple-400 dark:bg-purple-300\" },\n  ],\n  mails: [\n    {\n      name: \"Nora Patel\",\n      email: \"nora@acme.co\",\n      subject: \"Welcome to Acme Mail\",\n      date: \"08:15 AM\",\n      teaser:\n        \"Hi there — here's a quick tour of your new inbox.\\nPin, label, and schedule messages to stay organized.\",\n    },\n    {\n      name: \"Stripe\",\n      email: \"no-reply@stripe.com\",\n      subject: \"Your payout has arrived\",\n      date: \"Yesterday\",\n      teaser:\n        \"A payout of $3,245.90 was sent to your bank account.\\nView details in your dashboard.\",\n    },\n    {\n      name: \"GitHub\",\n      email: \"noreply@github.com\",\n      subject: \"New activity on acme/app\",\n      date: \"Tue\",\n      teaser:\n        \"3 pull requests need your review. CI passed on main.\\nClick to open the review queue.\",\n    },\n    {\n      name: \"Ava Chen\",\n      email: \"ava.chen@example.com\",\n      subject: \"Agenda for Friday standup\",\n      date: \"Mon\",\n      teaser:\n        \"Let's cover onboarding, billing bugs, and Q4 goals.\\nReply with anything you want to add.\",\n    },\n    {\n      name: \"Figma\",\n      email: \"updates@figma.com\",\n      subject: \"What's new in Figma\",\n      date: \"Sep 12\",\n      teaser:\n        \"Variables, auto layout improvements, and dev mode updates.\\nWatch the recap to learn more.\",\n    },\n    {\n      name: \"Linear\",\n      email: \"bot@linear.app\",\n      subject: \"[ACME-432] Edit modal broken\",\n      date: \"Sep 11\",\n      teaser:\n        \"Issue created by Wendy. Repro steps included.\\nSeverity: high, priority: P1.\",\n    },\n    {\n      name: \"Airbnb\",\n      email: \"booking@airbnb.com\",\n      subject: \"Your trip to Kyoto\",\n      date: \"Sep 10\",\n      teaser:\n        \"Get ready for your stay. Check-in details and local recommendations inside.\",\n    },\n    {\n      name: \"Notion\",\n      email: \"team@notion.so\",\n      subject: \"Weekly team recap\",\n      date: \"Sep 09\",\n      teaser:\n        \"Marketing shipped pricing page revamp. Eng closed 14 issues.\\nSee full notes in the doc.\",\n    },\n    {\n      name: \"Google Calendar\",\n      email: \"calendar@google.com\",\n      subject: \"Design sync moved\",\n      date: \"Sep 09\",\n      teaser:\n        \"Event 'Design sync' moved to 3:30 PM. Meet link updated in the invite.\",\n    },\n    {\n      name: \"HN Daily\",\n      email: \"digest@ycombinator.com\",\n      subject: \"Top stories today\",\n      date: \"Sep 08\",\n      teaser:\n        \"OpenAI releases new API, SQLite 3.46, and why we left Kubernetes.\\nRead the full digest.\",\n    },\n  ],\n};\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  // Note: I'm using state to show active item.\n  // IRL you should use the url/router.\n  const [activeItem, setActiveItem] = React.useState(data.navMain[0]);\n  const [mails, setMails] = React.useState(data.mails);\n  const [query, setQuery] = React.useState(\"\");\n  const { setOpen } = useSidebar();\n  const { setSelectedMail } = useMail();\n\n  const filteredMails = React.useMemo(() => {\n    const q = query.trim().toLowerCase();\n    if (!q) return mails;\n    return mails.filter((m) =>\n      [m.name, m.email, m.subject, m.teaser]\n        .join(\"\\n\")\n        .toLowerCase()\n        .includes(q)\n    );\n  }, [mails, query]);\n\n  return (\n    <div className=\"flex\">\n      {/* This is the first sidebar */}\n      <Sidebar\n        style={{ \"--sidebar-width\": \"12rem\" } as React.CSSProperties}\n        collapsible=\"none\"\n        className=\"border-r p-2 px-1\"\n      >\n        <SidebarHeader>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <SidebarMenuButton size=\"lg\" asChild className=\"md:h-8 md:p-0\">\n                <a href=\"#\">\n                  <div className=\"bg-sidebar-accent text-sidebar-accent-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                    <IconBrandAmongUs className=\"size-4\" />\n                  </div>\n                  <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                    <span className=\"truncate font-medium\">Acme Inc</span>\n                    <span className=\"truncate text-xs\">Enterprise</span>\n                  </div>\n                </a>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupContent className=\"px-1.5 md:px-0\">\n              <SidebarMenu>\n                {data.navMain.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton\n                      onClick={() => {\n                        setActiveItem(item);\n                        const mail = data.mails.sort(() => Math.random() - 0.5);\n                        setMails(\n                          mail.slice(\n                            0,\n                            Math.max(5, Math.floor(Math.random() * 10) + 1)\n                          )\n                        );\n                        setOpen(true);\n                      }}\n                      isActive={activeItem?.title === item.title}\n                      className=\"px-2.5 md:px-2\"\n                    >\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n          <SidebarGroup>\n            <SidebarGroupLabel className=\"px-1.5 md:px-0 text-xs\">\n              Labels\n            </SidebarGroupLabel>\n            <SidebarGroupContent className=\"px-1.5 md:px-0\">\n              <SidebarMenu>\n                {data.labels.map((label) => (\n                  <SidebarMenuItem key={label.title}>\n                    <SidebarMenuButton asChild className=\"px-2.5 md:px-2\">\n                      <div className=\"flex items-center gap-3\">\n                        <div\n                          className={`h-3 w-3 rounded-[4px] ${label.color}`}\n                        ></div>\n                        <span>{label.title}</span>\n                      </div>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n        <SidebarFooter>\n          <NavUser user={data.user} />\n        </SidebarFooter>\n      </Sidebar>\n\n      {/* This is the second sidebar */}\n      {/* We disable collapsible and let it fill remaining space */}\n      <Sidebar\n        collapsible=\"none\"\n        className=\"hidden flex-1 border-r md:flex min-w-96\"\n      >\n        <SidebarHeader className=\"gap-3.5 border-b p-4\">\n          <div className=\"flex w-full items-center justify-between\">\n            <div className=\"text-foreground text-base font-medium\">\n              {activeItem?.title}\n            </div>\n          </div>\n          <SidebarInput\n            placeholder=\"Type to search...\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n          />\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarGroup className=\"px-0 pt-0\">\n            <SidebarGroupContent>\n              {filteredMails.length === 0 && (\n                <div className=\"text-muted-foreground p-4 text-sm\">\n                  No results\n                </div>\n              )}\n              {filteredMails.map((mail) => (\n                <a\n                  href=\"#\"\n                  key={mail.email}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    setSelectedMail(mail);\n                  }}\n                  className=\"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground flex flex-col items-start gap-2 border-b p-4 text-sm leading-tight whitespace-nowrap\"\n                >\n                  <div className=\"flex w-full items-center gap-2\">\n                    <span>{mail.name}</span>{\" \"}\n                    <span className=\"ml-auto text-xs\">{mail.date}</span>\n                  </div>\n                  <span className=\"font-medium\">{mail.subject}</span>\n                  <span className=\"line-clamp-2 w-[260px] text-xs whitespace-break-spaces\">\n                    {mail.teaser}\n                  </span>\n                </a>\n              ))}\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n      </Sidebar>\n    </div>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-04/mail-context.tsx",
          "type": "registry:component",
          "target": "components/mail-context.tsx",
          "content": "\"use client\";\n\nimport * as React from \"react\";\n\nexport type Mail = {\n  name: string;\n  email: string;\n  subject: string;\n  date: string;\n  teaser: string;\n  labels?: string[];\n};\n\ntype MailContextValue = {\n  selectedMail: Mail | null;\n  setSelectedMail: (mail: Mail | null) => void;\n};\n\nconst MailContext = React.createContext<MailContextValue | undefined>(\n  undefined\n);\n\nexport function MailProvider({ children }: { children: React.ReactNode }) {\n  const [selectedMail, setSelectedMail] = React.useState<Mail | null>(null);\n  const value = React.useMemo(\n    () => ({ selectedMail, setSelectedMail }),\n    [selectedMail]\n  );\n  return <MailContext.Provider value={value}>{children}</MailContext.Provider>;\n}\n\nexport function useMail() {\n  const ctx = React.useContext(MailContext);\n  if (!ctx) throw new Error(\"useMail must be used within MailProvider\");\n  return ctx;\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-04/nav-user.tsx",
          "type": "registry:component",
          "target": "components/nav-user.tsx",
          "content": "\"use client\";\n\nimport {\n  BadgeCheck,\n  Bell,\n  ChevronsUpDown,\n  CreditCard,\n  LogOut,\n  Sparkles,\n} from \"lucide-react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\nexport function NavUser({\n  user,\n}: {\n  user: {\n    name: string;\n    email: string;\n    avatar: string;\n  };\n}) {\n  const { isMobile } = useSidebar();\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground md:h-8 md:p-0\"\n            >\n              <Avatar className=\"h-8 w-8 rounded-lg\">\n                <AvatarImage src={user.avatar} alt={user.name} />\n                <AvatarFallback className=\"rounded-lg\">CN</AvatarFallback>\n              </Avatar>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{user.name}</span>\n                <span className=\"truncate text-xs\">{user.email}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto size-4\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            align=\"end\"\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"p-0 font-normal\">\n              <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                <Avatar className=\"h-8 w-8 rounded-lg\">\n                  <AvatarImage src={user.avatar} alt={user.name} />\n                  <AvatarFallback className=\"rounded-lg\">CN</AvatarFallback>\n                </Avatar>\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-medium\">{user.name}</span>\n                  <span className=\"truncate text-xs\">{user.email}</span>\n                </div>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <Sparkles />\n                Upgrade to Pro\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <BadgeCheck />\n                Account\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <CreditCard />\n                Billing\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <Bell />\n                Notifications\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <LogOut />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  );\n}\n"
        }
      ],
      "categories": ["sidebar"]
    },
    {
      "name": "sidebar-05",
      "type": "registry:block",
      "title": "Double Sided Sidebar",
      "description": "A double sided sidebar block.",
      "author": "Gocha Gochitashvili <https://lost-ui.vercel.app>",
      "registryDependencies": ["avatar", "dropdown-menu", "sidebar"],
      "dependencies": ["@tabler/icons-react", "lucide-react"],
      "files": [
        {
          "path": "content/components/sidebar/sidebar-05/app/page.tsx",
          "type": "registry:page",
          "target": "app/page.tsx",
          "content": "\"use client\";\n\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\n\nexport default function Page() {\n  return (\n    <SidebarProvider>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-05/app-sidebar.tsx",
          "type": "registry:component",
          "target": "components/app-sidebar.tsx",
          "content": "\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  IconActivityHeartbeat,\n  IconArchive,\n  IconBackground,\n  IconBellRinging,\n  IconBrandGoogle,\n  IconBrandMeta,\n  IconBrandNpm,\n  IconBrandOpenai,\n  IconBug,\n  IconChartBar,\n  IconChevronRight,\n  IconCloud,\n  IconDatabase,\n  IconFileText,\n  IconFolder,\n  IconFolders,\n  IconGitCommit,\n  IconGitMerge,\n  IconGitPullRequest,\n  IconHome,\n  IconKey,\n  IconLockExclamation,\n  IconLockPassword,\n  IconLogout,\n  IconNorthStar,\n  IconPackageExport,\n  IconPackages,\n  IconPasswordFingerprint,\n  IconPlayerPlay,\n  IconScanEye,\n  IconSettings,\n  IconShieldLock,\n  IconStar,\n  IconTarget,\n  IconTerminal2,\n  IconUser,\n  IconUserPlus,\n  IconWebhook,\n  IconX,\n} from \"@tabler/icons-react\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport { TeamSwitcher } from \"@/components/team-switcher\";\n\nconst data = {\n  teams: [\n    {\n      name: \"OpenAI\",\n      logo: IconBrandOpenai,\n      plan: \"Enterprise\",\n    },\n    {\n      name: \"Anthropic\",\n      logo: IconNorthStar,\n      plan: \"Pro\",\n    },\n    {\n      name: \"Google\",\n      logo: IconBrandGoogle,\n      plan: \"Free\",\n    },\n    {\n      name: \"Meta\",\n      logo: IconBrandMeta,\n      plan: \"Free\",\n    },\n  ],\n};\n\ninterface SidebarItem {\n  id: string;\n  label: string;\n  icon: React.ComponentType<{ className?: string }>;\n  badge?: string;\n  hasSubItems?: boolean;\n  route?: string;\n  subItems?: {\n    id: string;\n    label: string;\n    icon: React.ComponentType<{ className?: string }>;\n    description?: string;\n    route?: string;\n  }[];\n}\n\nconst sidebarItems: SidebarItem[] = [\n  {\n    id: \"overview\",\n    label: \"Overview\",\n    icon: IconHome,\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"dashboard\",\n        label: \"Dashboard\",\n        icon: IconChartBar,\n        description: \"Project overview and activity\",\n        route: \"/overview/dashboard\",\n      },\n      {\n        id: \"activity\",\n        label: \"Activity\",\n        icon: IconActivityHeartbeat,\n        description: \"Recent commits and changes\",\n        route: \"/overview/activity\",\n      },\n      {\n        id: \"insights\",\n        label: \"Insights\",\n        icon: IconTarget,\n        description: \"Code analytics and metrics\",\n        route: \"/overview/insights\",\n      },\n    ],\n  },\n  {\n    id: \"repositories\",\n    label: \"Repositories\",\n    icon: IconFolders,\n    badge: \"12\",\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"all-repos\",\n        label: \"All Repositories\",\n        icon: IconFolder,\n        description: \"Browse all your repositories\",\n        route: \"/repositories\",\n      },\n      {\n        id: \"starred\",\n        label: \"Starred\",\n        icon: IconStar,\n        description: \"Your starred repositories\",\n        route: \"/repositories/starred\",\n      },\n      {\n        id: \"archived\",\n        label: \"Archived\",\n        icon: IconArchive,\n        description: \"Archived repositories\",\n        route: \"/repositories/archived\",\n      },\n    ],\n  },\n  {\n    id: \"pull-requests\",\n    label: \"Pull Requests\",\n    icon: IconGitPullRequest,\n    badge: \"3\",\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"open-prs\",\n        label: \"Open\",\n        icon: IconGitPullRequest,\n        description: \"Open pull requests\",\n        route: \"/pull-requests/open\",\n      },\n      {\n        id: \"review-requests\",\n        label: \"Review Requests\",\n        icon: IconScanEye,\n        description: \"PRs awaiting your review\",\n        route: \"/pull-requests/review\",\n      },\n      {\n        id: \"merged\",\n        label: \"Merged\",\n        icon: IconGitMerge,\n        description: \"Recently merged PRs\",\n        route: \"/pull-requests/merged\",\n      },\n    ],\n  },\n  {\n    id: \"issues\",\n    label: \"Issues\",\n    icon: IconBug,\n    badge: \"7\",\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"open-issues\",\n        label: \"Open Issues\",\n        icon: IconBug,\n        description: \"Active issues and bugs\",\n        route: \"/issues/open\",\n      },\n      {\n        id: \"assigned\",\n        label: \"Assigned to Me\",\n        icon: IconUserPlus,\n        description: \"Issues assigned to you\",\n        route: \"/issues/assigned\",\n      },\n      {\n        id: \"created\",\n        label: \"Created by Me\",\n        icon: IconGitCommit,\n        description: \"Issues you've created\",\n        route: \"/issues/created\",\n      },\n    ],\n  },\n  {\n    id: \"actions\",\n    label: \"Actions\",\n    icon: IconBackground,\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"workflows\",\n        label: \"Workflows\",\n        icon: IconPlayerPlay,\n        description: \"CI/CD workflows and pipelines\",\n        route: \"/actions/workflows\",\n      },\n      {\n        id: \"runners\",\n        label: \"Runners\",\n        icon: IconTerminal2,\n        description: \"Self-hosted runners\",\n        route: \"/actions/runners\",\n      },\n      {\n        id: \"deployments\",\n        label: \"Deployments\",\n        icon: IconCloud,\n        description: \"Deployment history\",\n        route: \"/actions/deployments\",\n      },\n    ],\n  },\n  {\n    id: \"packages\",\n    label: \"Packages\",\n    icon: IconPackages,\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"published\",\n        label: \"Published\",\n        icon: IconPackageExport,\n        description: \"Your published packages\",\n        route: \"/packages/published\",\n      },\n      {\n        id: \"container-registry\",\n        label: \"Container Registry\",\n        icon: IconDatabase,\n        description: \"Docker images and containers\",\n        route: \"/packages/containers\",\n      },\n      {\n        id: \"npm-packages\",\n        label: \"npm Packages\",\n        icon: IconBrandNpm,\n        description: \"Node.js packages\",\n        route: \"/packages/npm\",\n      },\n    ],\n  },\n  {\n    id: \"security\",\n    label: \"Security\",\n    icon: IconLockPassword,\n    badge: \"2\",\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"alerts\",\n        label: \"Security Alerts\",\n        icon: IconLockExclamation,\n        description: \"Vulnerability alerts\",\n        route: \"/security/alerts\",\n      },\n      {\n        id: \"advisories\",\n        label: \"Advisories\",\n        icon: IconShieldLock,\n        description: \"Security advisories\",\n        route: \"/security/advisories\",\n      },\n      {\n        id: \"secrets\",\n        label: \"Secrets\",\n        icon: IconPasswordFingerprint,\n        description: \"Repository secrets\",\n        route: \"/security/secrets\",\n      },\n    ],\n  },\n  {\n    id: \"settings\",\n    label: \"Settings\",\n    icon: IconSettings,\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"profile\",\n        label: \"Profile\",\n        icon: IconUser,\n        description: \"Your profile settings\",\n        route: \"/settings/profile\",\n      },\n      {\n        id: \"notifications\",\n        label: \"Notifications\",\n        icon: IconBellRinging,\n        description: \"Notification preferences\",\n        route: \"/settings/notifications\",\n      },\n      {\n        id: \"webhooks\",\n        label: \"Webhooks\",\n        icon: IconWebhook,\n        description: \"Webhook configurations\",\n        route: \"/settings/webhooks\",\n      },\n      {\n        id: \"api-keys\",\n        label: \"API Keys\",\n        icon: IconKey,\n        description: \"Personal access tokens\",\n        route: \"/settings/api-keys\",\n      },\n    ],\n  },\n  {\n    id: \"docs\",\n    label: \"Documentation\",\n    icon: IconFileText,\n    hasSubItems: false,\n    route: \"/docs\",\n  },\n];\n\nexport function AppSidebar() {\n  const [activeItem, setActiveItem] = useState<string | null>(\"overview\");\n  const [selectedSubItem, setSelectedSubItem] = useState<string | null>(null);\n\n  const activeItemData = sidebarItems.find((item) => item.id === activeItem);\n\n  const handleItemClick = (item: SidebarItem) => {\n    if (item.hasSubItems) {\n      const isActive = activeItem === item.id;\n      setActiveItem(isActive ? null : item.id);\n      if (isActive) {\n        setSelectedSubItem(null);\n      }\n    } else {\n      if (activeItem) {\n        setActiveItem(null);\n        setSelectedSubItem(null);\n      }\n      console.log(`[v0] Navigating to: ${item.route}`);\n    }\n  };\n\n  const handleSubItemClick = (subItem: { id: string; route?: string }) => {\n    setSelectedSubItem(selectedSubItem === subItem.id ? null : subItem.id);\n    if (subItem.route) {\n      console.log(`[v0] Navigating to: ${subItem.route}`);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar\n        side=\"left\"\n        variant=\"sidebar\"\n        collapsible=\"none\"\n        className=\"w-64 border-r\"\n      >\n        <SidebarHeader>\n          <TeamSwitcher teams={data.teams} />\n        </SidebarHeader>\n\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {sidebarItems.map((item) => {\n                  const Icon = item.icon;\n                  const isActive = activeItem === item.id;\n                  const chevronIndicator = (\n                    <IconChevronRight\n                      className={cn(\n                        \"h-4 w-4 transition-transform shrink-0\",\n                        isActive && \"rotate-90\"\n                      )}\n                    />\n                  );\n\n                  return (\n                    <SidebarMenuItem key={item.id}>\n                      <SidebarMenuButton\n                        isActive={isActive}\n                        className=\"w-full h-10 px-3\"\n                        onClick={() => handleItemClick(item)}\n                      >\n                        <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                          <Icon className=\"h-4 w-4 shrink-0\" />\n                          <span className=\"truncate\">{item.label}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1 shrink-0 ml-auto min-w-fit\">\n                          {(item.badge || item.hasSubItems) &&\n                            (item.badge ? (\n                              <SidebarMenuBadge\n                                className={cn(\n                                  \"min-w-fit\",\n                                  item.hasSubItems && \"gap-x-3\"\n                                )}\n                              >\n                                {item.badge}\n                                {item.hasSubItems && chevronIndicator}\n                              </SidebarMenuBadge>\n                            ) : (\n                              chevronIndicator\n                            ))}\n                        </div>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  );\n                })}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <SidebarMenuButton className=\"w-full h-12 px-3\">\n                <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                  <Avatar className=\"h-8 w-8 rounded-full\">\n                    <AvatarImage src=\"/avatar-01.png\" alt=\"ephraim\" />\n                    <AvatarFallback className=\"rounded-full\">E</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 text-left min-w-0\">\n                    <div className=\"text-sm font-medium truncate\">ephraim</div>\n                    <div className=\"text-xs text-muted-foreground truncate\">\n                      ephraim@lost-ui.vercel.app\n                    </div>\n                  </div>\n                </div>\n                <IconLogout className=\"h-4 w-4 shrink-0\" />\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n      </Sidebar>\n\n      {activeItem && activeItemData?.subItems && (\n        <Sidebar\n          side=\"left\"\n          variant=\"sidebar\"\n          collapsible=\"none\"\n          className=\"w-72 animate-in slide-in-from-left-5 duration-200 border-r\"\n        >\n          <SidebarHeader className=\"flex flex-row items-center justify-between border-b px-4\">\n            <h3 className=\"font-medium\">{activeItemData.label}</h3>\n            <button\n              onClick={() => setActiveItem(null)}\n              className=\"h-6 w-6 p-0 rounded-md hover:bg-sidebar-accent flex items-center justify-center\"\n            >\n              <IconX className=\"h-4 w-4\" />\n            </button>\n          </SidebarHeader>\n\n          <SidebarContent>\n            <SidebarGroup>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {activeItemData.subItems.map((subItem) => {\n                    const SubIcon = subItem.icon;\n                    const isSelected = selectedSubItem === subItem.id;\n\n                    return (\n                      <SidebarMenuItem key={subItem.id}>\n                        <SidebarMenuButton\n                          isActive={isSelected}\n                          className=\"w-full justify-start gap-3 h-auto py-2 px-3\"\n                          onClick={() => handleSubItemClick(subItem)}\n                        >\n                          <SubIcon className=\"h-5 w-5 shrink-0 self-start mt-0.5\" />\n\n                          <div className=\"flex-1 text-left min-w-0\">\n                            <div className=\"font-medium\">{subItem.label}</div>\n                            {subItem.description && (\n                              <div className=\"text-xs text-muted-foreground mt-0.5\">\n                                {subItem.description}\n                              </div>\n                            )}\n                          </div>\n                        </SidebarMenuButton>\n                      </SidebarMenuItem>\n                    );\n                  })}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </SidebarContent>\n        </Sidebar>\n      )}\n    </div>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-05/team-switcher.tsx",
          "type": "registry:component",
          "target": "components/team-switcher.tsx",
          "content": "\"use client\";\n\nimport { ChevronsUpDown, Plus } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\nexport function TeamSwitcher({\n  teams,\n}: {\n  teams: {\n    name: string;\n    logo: React.ElementType;\n    plan: string;\n  }[];\n}) {\n  const { isMobile } = useSidebar();\n  const [activeTeam, setActiveTeam] = React.useState(teams[0]);\n\n  if (!activeTeam) {\n    return null;\n  }\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <div className=\"bg-sidebar-accent text-sidebar-accent-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                <activeTeam.logo className=\"size-4\" />\n              </div>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{activeTeam.name}</span>\n                <span className=\"truncate text-xs\">{activeTeam.plan}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n            align=\"start\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"text-muted-foreground text-xs\">\n              Teams\n            </DropdownMenuLabel>\n            {teams.map((team, index) => (\n              <DropdownMenuItem\n                key={team.name}\n                onClick={() => setActiveTeam(team)}\n                className=\"gap-2 p-2\"\n              >\n                <div className=\"flex size-6 items-center justify-center rounded-md border\">\n                  <team.logo className=\"size-3.5 shrink-0\" />\n                </div>\n                {team.name}\n                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            ))}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"gap-2 p-2\">\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-transparent\">\n                <Plus className=\"size-4\" />\n              </div>\n              <div className=\"text-muted-foreground font-medium\">Add team</div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  );\n}\n"
        }
      ],
      "categories": ["sidebar"]
    },
    {
      "name": "sidebar-06",
      "type": "registry:block",
      "title": "Replacement Sidebar",
      "description": "A replacement sidebar block.",
      "author": "Gocha Gochitashvili <https://lost-ui.vercel.app>",
      "registryDependencies": ["avatar", "dropdown-menu", "sidebar"],
      "dependencies": ["@tabler/icons-react", "lucide-react"],
      "files": [
        {
          "path": "content/components/sidebar/sidebar-06/app/page.tsx",
          "type": "registry:page",
          "target": "app/page.tsx",
          "content": "\"use client\";\n\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\n\nexport default function Page() {\n  return (\n    <SidebarProvider>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  );\n}"
        },
        {
          "path": "content/components/sidebar/sidebar-06/app-sidebar.tsx",
          "type": "registry:component",
          "target": "components/app-sidebar.tsx",
          "content": "\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  IconActivityHeartbeat,\n  IconArchive,\n  IconArrowLeft,\n  IconBackground,\n  IconBellRinging,\n  IconBrandGoogle,\n  IconBrandMeta,\n  IconBrandNpm,\n  IconBrandOpenai,\n  IconBug,\n  IconChartBar,\n  IconChevronRight,\n  IconCloud,\n  IconDatabase,\n  IconFileText,\n  IconFolder,\n  IconFolders,\n  IconGitCommit,\n  IconGitMerge,\n  IconGitPullRequest,\n  IconHome,\n  IconKey,\n  IconLockExclamation,\n  IconLockPassword,\n  IconLogout,\n  IconNorthStar,\n  IconPackageExport,\n  IconPackages,\n  IconPasswordFingerprint,\n  IconPlayerPlay,\n  IconScanEye,\n  IconSettings,\n  IconShieldLock,\n  IconStar,\n  IconTarget,\n  IconTerminal2,\n  IconUser,\n  IconUserPlus,\n  IconWebhook,\n} from \"@tabler/icons-react\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport { TeamSwitcher } from \"@/components/team-switcher\";\n\nconst data = {\n  teams: [\n    {\n      name: \"OpenAI\",\n      logo: IconBrandOpenai,\n      plan: \"Enterprise\",\n    },\n    {\n      name: \"Anthropic\",\n      logo: IconNorthStar,\n      plan: \"Pro\",\n    },\n    {\n      name: \"Google\",\n      logo: IconBrandGoogle,\n      plan: \"Free\",\n    },\n    {\n      name: \"Meta\",\n      logo: IconBrandMeta,\n      plan: \"Free\",\n    },\n  ],\n};\n\ninterface SidebarItem {\n  id: string;\n  label: string;\n  icon: React.ComponentType<{ className?: string }>;\n  badge?: string;\n  hasSubItems?: boolean;\n  route?: string;\n  subItems?: {\n    id: string;\n    label: string;\n    icon: React.ComponentType<{ className?: string }>;\n    route?: string;\n  }[];\n}\n\nconst sidebarItems: SidebarItem[] = [\n  {\n    id: \"overview\",\n    label: \"Overview\",\n    icon: IconHome,\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"dashboard\",\n        label: \"Dashboard\",\n        icon: IconChartBar,\n        route: \"/overview/dashboard\",\n      },\n      {\n        id: \"activity\",\n        label: \"Activity\",\n        icon: IconActivityHeartbeat,\n        route: \"/overview/activity\",\n      },\n      {\n        id: \"insights\",\n        label: \"Insights\",\n        icon: IconTarget,\n        route: \"/overview/insights\",\n      },\n    ],\n  },\n  {\n    id: \"repositories\",\n    label: \"Repositories\",\n    icon: IconFolders,\n    badge: \"12\",\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"all-repos\",\n        label: \"All Repositories\",\n        icon: IconFolder,\n        route: \"/repositories\",\n      },\n      {\n        id: \"starred\",\n        label: \"Starred\",\n        icon: IconStar,\n        route: \"/repositories/starred\",\n      },\n      {\n        id: \"archived\",\n        label: \"Archived\",\n        icon: IconArchive,\n        route: \"/repositories/archived\",\n      },\n    ],\n  },\n  {\n    id: \"pull-requests\",\n    label: \"Pull Requests\",\n    icon: IconGitPullRequest,\n    badge: \"3\",\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"open-prs\",\n        label: \"Open\",\n        icon: IconGitPullRequest,\n        route: \"/pull-requests/open\",\n      },\n      {\n        id: \"review-requests\",\n        label: \"Review Requests\",\n        icon: IconScanEye,\n        route: \"/pull-requests/review\",\n      },\n      {\n        id: \"merged\",\n        label: \"Merged\",\n        icon: IconGitMerge,\n        route: \"/pull-requests/merged\",\n      },\n    ],\n  },\n  {\n    id: \"issues\",\n    label: \"Issues\",\n    icon: IconBug,\n    badge: \"7\",\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"open-issues\",\n        label: \"Open Issues\",\n        icon: IconBug,\n        route: \"/issues/open\",\n      },\n      {\n        id: \"assigned\",\n        label: \"Assigned to Me\",\n        icon: IconUserPlus,\n        route: \"/issues/assigned\",\n      },\n      {\n        id: \"created\",\n        label: \"Created by Me\",\n        icon: IconGitCommit,\n        route: \"/issues/created\",\n      },\n    ],\n  },\n  {\n    id: \"actions\",\n    label: \"Actions\",\n    icon: IconBackground,\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"workflows\",\n        label: \"Workflows\",\n        icon: IconPlayerPlay,\n        route: \"/actions/workflows\",\n      },\n      {\n        id: \"runners\",\n        label: \"Runners\",\n        icon: IconTerminal2,\n        route: \"/actions/runners\",\n      },\n      {\n        id: \"deployments\",\n        label: \"Deployments\",\n        icon: IconCloud,\n        route: \"/actions/deployments\",\n      },\n    ],\n  },\n  {\n    id: \"packages\",\n    label: \"Packages\",\n    icon: IconPackages,\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"published\",\n        label: \"Published\",\n        icon: IconPackageExport,\n        route: \"/packages/published\",\n      },\n      {\n        id: \"container-registry\",\n        label: \"Container Registry\",\n        icon: IconDatabase,\n        route: \"/packages/containers\",\n      },\n      {\n        id: \"npm-packages\",\n        label: \"npm Packages\",\n        icon: IconBrandNpm,\n        route: \"/packages/npm\",\n      },\n    ],\n  },\n  {\n    id: \"security\",\n    label: \"Security\",\n    icon: IconLockPassword,\n    badge: \"2\",\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"alerts\",\n        label: \"Security Alerts\",\n        icon: IconLockExclamation,\n        route: \"/security/alerts\",\n      },\n      {\n        id: \"advisories\",\n        label: \"Advisories\",\n        icon: IconShieldLock,\n        route: \"/security/advisories\",\n      },\n      {\n        id: \"secrets\",\n        label: \"Secrets\",\n        icon: IconPasswordFingerprint,\n        route: \"/security/secrets\",\n      },\n    ],\n  },\n  {\n    id: \"settings\",\n    label: \"Settings\",\n    icon: IconSettings,\n    hasSubItems: true,\n    subItems: [\n      {\n        id: \"profile\",\n        label: \"Profile\",\n        icon: IconUser,\n        route: \"/settings/profile\",\n      },\n      {\n        id: \"notifications\",\n        label: \"Notifications\",\n        icon: IconBellRinging,\n        route: \"/settings/notifications\",\n      },\n      {\n        id: \"webhooks\",\n        label: \"Webhooks\",\n        icon: IconWebhook,\n        route: \"/settings/webhooks\",\n      },\n      {\n        id: \"api-keys\",\n        label: \"API Keys\",\n        icon: IconKey,\n        route: \"/settings/api-keys\",\n      },\n    ],\n  },\n  {\n    id: \"docs\",\n    label: \"Documentation\",\n    icon: IconFileText,\n    hasSubItems: false,\n    route: \"/docs\",\n  },\n];\n\nexport function AppSidebar() {\n  const [activeItem, setActiveItem] = useState<string | null>(null);\n  const [selectedSubItem, setSelectedSubItem] = useState<string | null>(null);\n\n  const activeItemData = sidebarItems.find((item) => item.id === activeItem);\n\n  const handleItemClick = (item: SidebarItem) => {\n    if (item.hasSubItems) {\n      setActiveItem(item.id);\n      setSelectedSubItem(null);\n    } else {\n      console.log(`[v0] Navigating to: ${item.route}`);\n    }\n  };\n\n  const handleSubItemClick = (subItem: { id: string; route?: string }) => {\n    setSelectedSubItem(selectedSubItem === subItem.id ? null : subItem.id);\n    if (subItem.route) {\n      console.log(`[v0] Navigating to: ${subItem.route}`);\n    }\n  };\n\n  const handleBackToMain = () => {\n    setActiveItem(null);\n    setSelectedSubItem(null);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar\n        side=\"left\"\n        variant=\"sidebar\"\n        collapsible=\"none\"\n        className=\"w-64 border-r\"\n      >\n        {!activeItem ? (\n          <>\n            <SidebarHeader>\n              <TeamSwitcher teams={data.teams} />\n            </SidebarHeader>\n\n            <SidebarContent>\n              <SidebarGroup>\n                <SidebarGroupContent>\n                  <SidebarMenu>\n                    {sidebarItems.map((item) => {\n                      const Icon = item.icon;\n                      const chevronIndicator = (\n                        <IconChevronRight className=\"h-4 w-4 transition-transform shrink-0\" />\n                      );\n\n                      return (\n                        <SidebarMenuItem key={item.id}>\n                          <SidebarMenuButton\n                            className=\"w-full h-10 px-3\"\n                            onClick={() => handleItemClick(item)}\n                          >\n                            <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                              <Icon className=\"h-4 w-4 shrink-0\" />\n                              <span className=\"truncate\">{item.label}</span>\n                            </div>\n                            <div className=\"flex items-center gap-1 shrink-0 ml-auto min-w-fit\">\n                              {(item.badge || item.hasSubItems) &&\n                                (item.badge ? (\n                                  <SidebarMenuBadge\n                                    className={cn(\n                                      \"min-w-fit\",\n                                      item.hasSubItems && \"gap-x-3\"\n                                    )}\n                                  >\n                                    {item.badge}\n                                    {item.hasSubItems && chevronIndicator}\n                                  </SidebarMenuBadge>\n                                ) : (\n                                  chevronIndicator\n                                ))}\n                            </div>\n                          </SidebarMenuButton>\n                        </SidebarMenuItem>\n                      );\n                    })}\n                  </SidebarMenu>\n                </SidebarGroupContent>\n              </SidebarGroup>\n            </SidebarContent>\n\n            <SidebarFooter>\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <SidebarMenuButton className=\"w-full h-12 px-3\">\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                      <Avatar className=\"h-8 w-8 rounded-full\">\n                        <AvatarImage src=\"/avatar-01.png\" alt=\"ephraim\" />\n                        <AvatarFallback className=\"rounded-full\">\n                          E\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 text-left min-w-0\">\n                        <div className=\"text-sm font-medium truncate\">\n                          ephraim\n                        </div>\n                        <div className=\"text-xs text-muted-foreground truncate\">\n                          ephraim@lost-ui.vercel.app\n                        </div>\n                      </div>\n                    </div>\n                    <IconLogout className=\"h-4 w-4 shrink-0\" />\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              </SidebarMenu>\n            </SidebarFooter>\n          </>\n        ) : (\n          activeItemData?.subItems && (\n            <>\n              <SidebarHeader className=\"flex flex-row items-center justify-between border-b px-4\">\n                <button\n                  onClick={handleBackToMain}\n                  className=\"h-8 w-8 p-0 rounded-md hover:bg-sidebar-accent flex items-center justify-center\"\n                >\n                  <IconArrowLeft className=\"h-4 w-4\" />\n                </button>\n                <h3 className=\"font-medium flex-1 text-center\">\n                  {activeItemData.label}\n                </h3>\n                <div className=\"w-8\" />\n              </SidebarHeader>\n\n              <SidebarContent>\n                <SidebarGroup>\n                  <SidebarGroupContent>\n                    <SidebarMenu>\n                      {activeItemData.subItems.map((subItem) => {\n                        const SubIcon = subItem.icon;\n                        const isSelected = selectedSubItem === subItem.id;\n\n                        return (\n                          <SidebarMenuItem key={subItem.id}>\n                            <SidebarMenuButton\n                              isActive={isSelected}\n                              className=\"w-full h-10 px-3\"\n                              onClick={() => handleSubItemClick(subItem)}\n                            >\n                              <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                                <SubIcon className=\"h-4 w-4 shrink-0\" />\n                                <span className=\"truncate\">\n                                  {subItem.label}\n                                </span>\n                              </div>\n                            </SidebarMenuButton>\n                          </SidebarMenuItem>\n                        );\n                      })}\n                    </SidebarMenu>\n                  </SidebarGroupContent>\n                </SidebarGroup>\n              </SidebarContent>\n            </>\n          )\n        )}\n      </Sidebar>\n    </div>\n  );\n}\n"
        },
        {
          "path": "content/components/sidebar/sidebar-06/team-switcher.tsx",
          "type": "registry:component",
          "target": "components/team-switcher.tsx",
          "content": "\"use client\";\n\nimport { ChevronsUpDown, Plus } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\nexport function TeamSwitcher({\n  teams,\n}: {\n  teams: {\n    name: string;\n    logo: React.ElementType;\n    plan: string;\n  }[];\n}) {\n  const { isMobile } = useSidebar();\n  const [activeTeam, setActiveTeam] = React.useState(teams[0]);\n\n  if (!activeTeam) {\n    return null;\n  }\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <div className=\"bg-sidebar-accent text-sidebar-accent-foreground flex aspect-square size-8 items-center justify-center rounded-lg\">\n                <activeTeam.logo className=\"size-4\" />\n              </div>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{activeTeam.name}</span>\n                <span className=\"truncate text-xs\">{activeTeam.plan}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n            align=\"start\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"text-muted-foreground text-xs\">\n              Teams\n            </DropdownMenuLabel>\n            {teams.map((team, index) => (\n              <DropdownMenuItem\n                key={team.name}\n                onClick={() => setActiveTeam(team)}\n                className=\"gap-2 p-2\"\n              >\n                <div className=\"flex size-6 items-center justify-center rounded-md border\">\n                  <team.logo className=\"size-3.5 shrink-0\" />\n                </div>\n                {team.name}\n                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            ))}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"gap-2 p-2\">\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-transparent\">\n                <Plus className=\"size-4\" />\n              </div>\n              <div className=\"text-muted-foreground font-medium\">Add team</div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  );\n}\n"
        }
      ],
      "categories": ["sidebar"]
    }
  ]
}
